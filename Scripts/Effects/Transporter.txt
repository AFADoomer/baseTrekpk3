class TransporterParticle : Actor
{
	double user_z;
	double user_Radius;
	double user_scale;
	double user_scaleamt;
	int user_rollamt;

	Default
	{
		+BRIGHT
		+NOINTERACTION
		+NOBLOCKMAP
		+NOTELEPORT
		+NOGRAVITY
		+ROLLSPRITE
		+FORCEXYBILLBOARD
		RenderStyle "Add";
	}

	States
	{
		Spawn:
			TRAN A 0;
			Goto Initial;
/*
 NoDelay A_Jump(256, "A", "B", "C", "D");
		A:
			TRAN A 1;
			Goto Initial;
		B:
			TRAN B 1;
			Goto Initial;
		C:
			TRAN C 1;
			Goto Initial;
		D:
			TRAN D 1;
			Goto Initial;
*/
		Initial:
			"####" "#" 0 {
				frame = Random(0, 3);

				user_scale = frandom(0.125, 0.5);
				user_scaleamt = frandom(-0.1, 0.1);
				user_rollamt = Random(-15, 15);
				user_Radius = GetDistance(FALSE, AAPTR_MASTER);
				user_z = pos.z;

				A_SetScale(user_scale);
				A_FaceMaster(0, 270, -90, 0, FAF_MIDDLE);

				A_Warp(AAPTR_MASTER, 0, user_Radius, 0, 0, WARPF_USECALLERANGLE | WARPF_INTERPOLATE);

				user_z = user_z - pos.z;

				A_Warp(AAPTR_MASTER, 0, user_Radius, user_z, 0, WARPF_USECALLERANGLE | WARPF_INTERPOLATE);
			}
		Draw:
			"####" "#" 1 {
				A_Warp(AAPTR_MASTER, 0, user_Radius, pos.z - floorz, (16.0 - user_Radius) * 3, WARPF_USECALLERANGLE | WARPF_INTERPOLATE);

				if (scale.Y >= user_scale || scale.Y <= -user_scale) {
					user_scaleamt = -user_scaleamt;
				}

				Scale.Y += user_scaleamt;
				roll += user_rollamt;

				A_FadeOut(0.01);

				if ((pos.z - floorz > 84.0 && vel.z > 0) || (pos.z < floorz && vel.z < 0)) {
					return ResolveState("Done");
				}
				return ResolveState(null);
			}
			Loop;
		Done:
			TNT1 A 1;
			Stop;
	}
}

class KlingonTransporterParticle : TransporterParticle
{
	States
	{
		Spawn:
			TRAK A 0;
			Goto Initial;
	}
}

class TransporterLight : Actor
{
	Default
	{
		+INVISIBLE
		+NOINTERACTION
	}

	States
	{
		Spawn:
			UNKN A 96;
			Stop;
	}
}

class TransporterLightK : TransporterLight {}

class TransporterEffect : TeleportFog
{	
	int count;
	double spread;
	double heightspread;
	String particleclass;
	String lightclass;
	String soundeffect;

	Property ParticleClass:particleclass;
	Property LightClass:lightclass;
	Property SoundEffect:soundeffect;

	Default
	{
		-NOGRAVITY
		Radius 0;
		Species "Transporter";
		TransporterEffect.ParticleClass "TransporterParticle";
		TransporterEffect.LightClass "TransporterLight";
		TransporterEffect.SoundEffect "transporter/out";
	}

	States
	{
		Spawn:
			TNT1 A 0 NoDelay {
				A_CheckSight("Done");
				A_PlaySound(soundeffect);
				ACS_NamedExecuteAlways("SetRadarTID", 0);
			}
			TNT1 A 35 A_SpawnItemEx(
				lightclass,
				0, 0, 0,
				0, 0, 0.35,
				0,
				0);
		DrawParticles:
			TNT1 A 0 {
				A_SpawnItemEx(particleclass, frandom(-spread, spread), frandom(-spread, spread), frandom(0, heightspread * 0.6), 0, 0, frandom(0.0625, 0.25), 0, SXF_SETMASTER);
				A_SpawnItemEx(particleclass, frandom(-spread * 0.75, spread * 0.75), frandom(-spread * 0.75, spread * 0.75), frandom(0, heightspread * 0.4), 0, 0, frandom(0.125, 0.5), 0, SXF_SETMASTER);
				A_SpawnItemEx(particleclass, frandom(-spread / 2, spread / 2), frandom(-spread / 2, spread / 2), frandom(heightspread / 2, heightspread * 0.75), 0, 0, frandom(0.25, 0.5), 0, SXF_SETMASTER);
				if (count == 0) {
					A_SetTics(Random(1, 15));
				} else if (count % 32 == 0) {
					A_SetTics(1);
				}
			}
			TNT1 A 0 A_JumpIf(count > (64 * GetCVar("g_glitterdensity")), "Done");
			TNT1 A 0 { count++; }
			Loop;
		Done:
			TNT1 A 5;
			TNT1 A 0 {
				if (master && master.alpha > 0) {
					master.bSolid = false;
					master.A_SetRenderStyle(master.alpha - 0.05, STYLE_Translucent);
					return ResolveState("Done");
				}
				return ResolveState(null);
			}
			TNT1 A 1 { if (master) { master.A_SetRenderStyle(0, STYLE_Translucent); } }
			Stop;
	}

	override void PostBeginPlay()
	{
		if (!master) { master = ClosestActor(); }

		if (master)
		{
			spread = master.radius;
			heightspread = master.height * 1.2;
			SetOrigin(master.pos, false);
		}
		else
		{
			spread = 16.0;
			heightspread = 84.0;
		}
	}

	actor ClosestActor()
	{
		ThinkerIterator Finder = ThinkerIterator.Create("Actor", Thinker.STAT_DEFAULT);
		Actor mo, closest;
		while (mo = Actor(Finder.Next()))
		{
			if (mo == self) { continue; }
			if (Distance3d(mo) > 16) { continue; }

			if (closest && Distance3d(mo) > Distance3d(closest)) { continue; }

			closest = mo;
		}

		return closest;
	}
}

class TransSource : TransporterEffect
{
	Default
	{
		TransporterEffect.SoundEffect "transporter/out";
	}

	States
	{
		Spawn:
			TNT1 A 0 NoDelay {
				A_CheckSight("Done");
				A_PlaySound(soundeffect);
				ACS_NamedExecuteAlways("SetRadarTID", 0);
			}
			Goto DrawParticles;
	}
}

class TransporterEffect2 : TransporterEffect
{
	Default
	{
		TransporterEffect.SoundEffect "transporter/in";
	}

	States
	{
		Spawn:
			TNT1 A 0 NoDelay {
				A_CheckSight("Done");
				A_PlaySound(soundeffect);
				ACS_NamedExecuteAlways("SetRadarTID", 0);
			}
			TNT1 A 35 A_SpawnItemEx(
				"TransporterLight",
				0, 0, 84.0,
				0, 0, -0.5,
				0,
				0);
		DrawParticles:
			TNT1 A 0 {
				A_SpawnItemEx(particleclass, frandom(-spread, spread), frandom(-spread, spread), frandom(heightspread * 0.6, heightspread), 0, 0, frandom(-0.25, -0.5), 0, SXF_SETMASTER);
				A_SpawnItemEx(particleclass, frandom(-spread * 0.75, spread * 0.75), frandom(-spread * 0.75, spread * 0.75), frandom(heightspread / 2, heightspread * 0.75), 0, 0, frandom(-0.125, -0.5), 0, SXF_SETMASTER);
				A_SpawnItemEx(particleclass, frandom(-spread / 2, spread / 2), frandom(-spread / 2, spread / 2), frandom(heightspread * 0.2, heightspread * 0.6), 0, 0, frandom(-0.0625, -0.25), 0, SXF_SETMASTER);
				if (count == 0) {
					A_SetTics(Random(1, 15));
				} else if (count % 32 == 0) {
					A_SetTics(1);
				}
			}
			TNT1 A 0 A_JumpIf(count > (64 * GetCVar("g_glitterdensity")), "Done");
			TNT1 A 0 { count++; }
			Loop;
		Done:
			TNT1 A 5;
			TNT1 A 0 {
				if (master && master.alpha < 1.0) {
					master.bSolid = false;
					master.A_SetRenderStyle(master.alpha + 0.05, STYLE_Translucent);
					return ResolveState("Done");
				}
				if (master) { master.bSolid = master.default.bSolid; }
				return ResolveState(null);
			}
			TNT1 A 1 { if (master) { master.A_SetRenderStyle(1.0, STYLE_Normal); } }
			Stop;
	}
}

class TransDest : TransporterEffect2
{
	Default
	{
		TransporterEffect.SoundEffect "transporter/in";
	}

	States
	{
		Spawn:
			TNT1 A 0 NoDelay {
				A_CheckSight("Done");
				A_PlaySound("transporter/in");
				ACS_NamedExecuteAlways("SetRadarTID", 0);
			}
			Goto DrawParticles;
	}
}

class TransporterEffectK : TransporterEffect2
{
	Default
	{
		TransporterEffect.ParticleClass "KlingonTransporterParticle";
		TransporterEffect.LightClass "TransporterLightK";
		TransporterEffect.SoundEffect "transporter/klingon";
	}
/*
	States
	{
		Spawn:
			TNT1 A 0 NoDelay {
				A_CheckSight("Done");
				A_PlaySound("transporter/klingon");
				ACS_NamedExecuteAlways("SetRadarTID", 0);
			}
			TNT1 A 0 A_SpawnItemEx(
				"TransporterLightK",
				0, 0, 84.0,
				0, 0, -0.6,
				0,
				0);
		DrawParticles:
			TNT1 A 0 A_SpawnParticle(
				"bf0000",
				SPF_FULLBRIGHT | SPF_RELATIVE,
				256,
				2,
				0,
				frandom(-12.0, 12.0), frandom(-12.0, 12.0), frandom(32.0, 64.0),
				0, 0, frandom(-0.25, -0.5),
				0, 0, 0,
				0.9, 0.008);
			TNT1 A 0 A_JumpIf(count > (64 * GetCVar("g_glitterdensity")), "Done");
			TNT1 A 0 { count++; }
			Loop;
	}
*/
}

class SingleSpark : actor
{
	double fadeamt;
	int rollamt;

	Default
	{
		PROJECTILE;
		+NOBLOCKMAP;
		+BRIGHT;
		+NOTELEPORT;
		-NOGRAVITY;
		+ROLLSPRITE;
		+FORCEXYBILLBOARD;
		Height 0;
		Radius 0;
		Speed 1;
		Mass 1;
		Scale 0.01;
		Gravity 0.1;
		RenderStyle "AddStencil";
		StencilColor "Red";
		BounceType "Hexen";
	}

	States
	{
		Spawn:
			FLAS H 0 NoDelay {
				SetShade(RandomPick(color(250, 234, 146), color(224, 207, 99), color(189, 175, 76), color(253, 237, 152), color(255, 200, 100)));
				if (master) {
					fadeamt = 0.05 / master.Scale.Y;
				} else {
					fadeamt = 0.05;
				}
			}
		Initial:
			"####" # 0 {
				Scale.X = Scale.X * (FRandom(0.7, 1.3));
				Scale.Y = Scale.Y * (FRandom(0.7, 1.3));
				rollamt = Random(-15, 15);

				if (!SingleSpark(master) && Random() < 32) {
					let mo = A_SpawnProjectile("SingleSpark", -1, 0, Random(0, 359), CMF_AIMDIRECTION, 0);
					mo.master = master;
				}
				A_Face(master, 360, 180);
			}
		Draw:
			"####" # 1 {
				roll += rollamt;

				A_FadeOut(fadeamt);
			}
			Loop;
		Death:
			TNT1 A 1;
			Stop;
	}
}

class SparkSpawner : SwitchableDecoration 
{
	int spread;
	int sparkcount;

	Default
	{
		//$Arg0 "Min Interval (Default 35 tics)"
		//$Arg1 "Max Interval (Default 1050 tics)"
		//$Arg2 "Spread (Default 25 degrees)"
		+INVISIBLE
		+NOBLOCKMAP;
		+NOGRAVITY;
		+NOINTERACTION;
		+CLIENTSIDEONLY;
		Height 4;
		Radius 0;
	}

	void A_DoSparkInterval()
	{
		int Interval;

		Activate(self);

		if (args[2] > 0)
		{
			spread = args[2];
		}
		else
		{
			spread = 25;
		}

		if(args[0] > 0 || args[1] > 0)
		{
			Interval = Random[Sparks](args[0], args[1]);
		}
		else
		{
			Interval = Random[Sparks](35, 1050);
		}
		A_SetTics(Interval);
	}

	States
	{
		Spawn:
			UNKN A 5;
		SpawnLoop:
			UNKN A 1 A_DoSparkInterval();
			Loop;
		Active:
			UNKN A 0;
			UNKN A 0 A_PlaySound("world/spark", CHAN_AUTO, FRandom(0.1, 0.2));
			Goto SpawnSparks;
		SpawnSparks:
			UNKN A 1 {
				A_SetTics(Random(0, 1));
			}
			UNKN A 0 {
				if (sparkcount < 25)
				{
					int sparkangle;

					if (pitch > 0 && pitch % 180 == 0) {
						sparkangle = Random(0, 360);
					} else {
						sparkangle = Random(-spread, spread);
					}
					
					A_SpawnItemEx("SmallWhiteLight", 1, 0, 0, 0, 0, 0, 0, 128);
					let mo = A_SpawnProjectile("SingleSpark", -1, 0, sparkangle, CMF_AIMDIRECTION, 270 - pitch + FRandom(-spread, spread));
					mo.master = self;

					sparkcount++;
					return ResolveState("SpawnSparks");
				}

				sparkcount = 0;
				return ResolveState("SpawnLoop");
			}
		Inactive:
			UNKN A -1;
			Loop;
	}
}
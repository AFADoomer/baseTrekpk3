class TOSFlier : TrekEnemyActor
{
	double fixedangle;
	int timeout;
	int floatdir;
	vector3 oldpos;
	Actor firetarget;

	Default
	{
		+NOGRAVITY;
		+NOBLOOD;
		+LOOKALLAROUND;
		Speed 1;
		Mass 500;
		Height 54;
		Radius 10;
		Health 300;
		Tag "Sentry Drone";
		Obituary "%o was killed by a sentry drone.";
		Scale 0.75;
	}

	States
	{
		Spawn:
			TOS1 A 1;
			TOS1 A 0 {
				A_PlaySound("effects/hover", CHAN_5, 0.5, True);
				fixedangle = FRandom(0, 359);
				angle = fixedangle;
				A_SpawnItemEx("TOSFlier_Glow", flags:SXF_SETMASTER | SXF_TRANSFERPITCH  | SXF_TRANSFERROLL | SXF_TRANSFERSCALE);
			}
			Goto Super::Spawn;
		Stand:
			"####" # 1 A_LookEx (0, 0, 0, 2048, 360, "Chase");
			Loop;
		Chase:
			"####" A 1;
			"####" A 0 {
				pitch = 0;
				roll = 0;
				if (target && Distance3D(target) <= 2048) {
					if (timeout <= 0 && health > 0 && CheckSight(target)) {
						A_Chase("Missile", "Missile");
					} else {
						A_Chase(null, null);
						timeout--;
					}
				} else {
					A_Chase(null, null);
					A_LookEx (LOF_NOJUMP, 0, 0, 2048, 360, null);
				}

				if (target) {
					if (Distance3d(target) < radius + 32 + target.radius) { bFrightened = True; }
					else { bFrightened = False; }

					if (target.pos.z + target.height / 3 > pos.z + 16) { floatdir = 1; }
					else if (target.pos.z + target.height / 3 < pos.z - 16) { floatdir = -1; }
					else { floatdir = 0; }

					ThinkerIterator ActorFinder = ThinkerIterator.Create("Actor");
					Actor mo;
					while (mo = Actor(ActorFinder.Next()))
					{
						if (mo == self) { continue; }
						if (Distance2d(mo) >= (radius + mo.radius) * 1.4) { continue; }
						if (mo.pos.z + mo.height < pos.z || mo.pos.z > pos.z + height) { continue; }
						if (!mo.bSolid) { continue; }

						if (mo.pos.z + mo.height > pos.z - 16 && ceilingz - mo.pos.z + mo.height > height ) { floatdir = 1; }
						if (mo.pos.z < pos.z + height + 16 && mo.pos.z > floorz + height ) { floatdir = -1; }
					}

					A_ChangeVelocity(vel.x, vel.y, floatdir * Speed / 4, CVF_RELATIVE | CVF_REPLACE);
				}

				angle = fixedangle;
				oldpos = pos;
			}
			Loop;
		Missile:
 			"####" A 0 {
				firetarget = null;
				let left = A_SpawnProjectile("FlierShot", 23.0);
				if (left) { left.tracer = target; left.Speed = 10; }
				let right = A_SpawnProjectile("FlierShot", 23.0);
				if (right) { right.tracer = target; right.Speed = -10; }
				timeout = 70 + Random[FireDelay](0, 70);
			}
			Goto Chase;
		Pain:
			"####" # 1 {
				bool sp;
				Actor mo;

				if (health < SpawnHealth() / 5) {
					[sp, mo] = A_SpawnItemEx("FlareUp", 0, 0, 0, flags:SXF_TRANSFERSCALE | SXF_TRANSFERPITCH | SXF_TRANSFERROLL);
					mo.Scale.X = 0.00001;
					mo.Scale.Y = 0.00001;
				} else {
					A_SpawnItemEx("SmokePuff", 0, 0, 0, flags:SXF_TRANSFERSCALE | SXF_TRANSFERPITCH | SXF_TRANSFERROLL);
				}

				double bounce = 2500 / mass;

				pitch += FRandom(-bounce, bounce);
				roll += FRandom(-bounce, bounce);
			}
			Goto Chase;
		Death:
		Death.Stun:
		XDeath:
			"####" # 45 {
				A_RemoveChildren(True, RMVF_EVERYTHING);
				A_Scream();
				A_StopSound(CHAN_5);
				A_SpawnItemEx("DebrisSpawner", 0, 0, height / 2, flags:SXF_SETMASTER | SXF_TRANSFERSCALE);
				A_SpawnItemEx("DebrisSpawner", 0, 0, height / 2, flags:SXF_SETMASTER | SXF_TRANSFERSCALE);
				A_SpawnItemEx("DebrisSpawner", 0, 0, height / 2, flags:SXF_SETMASTER | SXF_TRANSFERSCALE);
				A_SpawnItemEx("FlareUp", flags:SXF_TRANSFERSCALE);
				ACS_NamedExecuteAlways("A_Disintegrate", 0, 16743936, 1);
				A_SetScale(1.25);
				A_SetPitch(pitch + FRandom(-30.0, 30.0), SPF_INTERPOLATE);
				A_SetRoll(roll + FRandom(-30.0, 30.0), SPF_INTERPOLATE);
			}
			Stop;
	}
}

class FlierShot : TrekEnemy
{
	double i;
	double firecount;
	double zoffset;
	double fireangle;
	double startscale;

	Actor firetarget;

	Default
	{
		+MISSILE;
		+NOINTERACTION;
		Speed 1;
		Scale 0.5;
		RenderStyle "STYLE_Add";
		Species "Projectile";
	}

	States
	{
		Spawn:
			FLAR P 1 Bright Light("TinyPurpleLight") NoDelay {
				if (tracer) {
					A_PlaySound("effects/buzz", CHAN_AUTO, 0.5);
					if (!zoffset) { zoffset = pos.z - target.pos.z; }
					if (!startscale) { startscale = Scale.X; }
					A_Warp(AAPTR_TARGET, 10, 0, zoffset, AngleTo(tracer) + (180 - i), WARPF_ABSOLUTEANGLE | WARPF_NOCHECKPOSITION | WARPF_INTERPOLATE); 
					A_SpawnItemEx("PhotonTorpedoShadow", flags:SXF_TRANSFERSCALE);
					A_SetScale(FRandom(0.7, 1.0));
					i += Speed;
				}
				else { return ResolveState("null"); }

				if (abs(i) >= 180)
				{
					fireangle = AngleTo(tracer);
 					master = target;
					target = tracer;
					A_SetScale(0.01 * startscale);
					return ResolveState("Final");
				}
				return ResolveState(null);
			}
			Loop;
		Final:
			FLAS H 1;
			FLAH H 0 {
				if (Speed > 0 && firecount <= 35 && master && master.health > 0 && master != target)
				{
					A_Warp(AAPTR_MASTER, 14, 0, zoffset, fireangle, WARPF_ABSOLUTEANGLE | WARPF_NOCHECKPOSITION | WARPF_INTERPOLATE);

					firetarget = TOSFlier(master).firetarget;

					if (!firetarget) { firetarget = Spawn("TargetActor", (target.pos.xy, target.pos.z + target.height / 2)); }
					if (firetarget) { firetarget.master = self; target = firetarget; }

//					A_FirePhaser("LaserBeam_ShipP", "SmallPurpleLight", "PhaserHitW", 1, 0, "weapons/rifle", 0, 4);
					A_FirePhaser("LightningBolt_P", "SmallPurpleLight", "PhaserHitW", 1, 0, "weapons/rifle", 0, 4, RandomPick(4.0, 8.0), 4, "LightningBoltCore_W");

					firecount++;
					A_SetScale(max(sin(firecount / 35 * 180) / 2, 0.15));
					return ResolveState("Final");
				}
				return ResolveState(null);
			}
			Stop;
	}
}

class TOSFlier_Glow : Actor
{
	Default
	{
		+NOINTERACTION;
		Radius 0;
		Height 0;
		RenderStyle "STYLE_Add";
		Alpha 0.5;
	}

	States
	{
		Spawn:
			TOS1 A 1 Bright {
				if (!master || master && master.health <= 0) { return ResolveState("null"); }
				A_Warp(AAPTR_MASTER, flags:WARPF_COPYPITCH | WARPF_COPYINTERPOLATION);
				return ResolveState(null);
			}
			Loop;
	}
}
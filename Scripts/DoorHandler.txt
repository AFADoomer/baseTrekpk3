class DoorHandler : Actor
{
	bool single, walkablemidtex;
	int moveamt, maxmoveamt, movetimeout, activationradius, locknumber;
	double movespeed, olddir;
	Array<Line> Lines;
	Array<Actor> Activators;

	Property MoveAmount:maxmoveamt;
	Property MoveSpeed:movespeed;
	Property SingleDoor:single;
	Property ActivationRadius:ActivationRadius;
	Property MidTex:walkablemidtex;

	Default
	{
		//$Category "Actor Effects"
		//$Arg0 "Key"
		//$Arg0ToolTip "What key should this door use (default none)?"
		//$Arg0Type 11
		//$Arg0Enum "keys"
		//$Arg1 "No height blocking"
		//$Arg1ToolTip "Disables height blocking for the door - normally only used if the door is a 3D midtex and the upped/lower areas need to be passable"
		//$Arg1Type 11
		//$Arg1Enum { 0 = "False"; 1 = "True"; }

		+SPECIAL
		+INVISIBLE
		-SOLID
		Height 92;
		Radius 8;
		DoorHandler.MoveAmount 120;
		DoorHandler.MoveSpeed 8;
		DoorHandler.SingleDoor 0;
		DoorHandler.ActivationRadius 92;
		ActiveSound "door/starfleet";
	}

	States
	{
		Spawn:
			UNKN A -1;
			Stop;
	}

	override void PostBeginPlay()
	{
		int lastindex;

		A_SetSize(activationradius);

		BlockLinesIterator it = BlockLinesIterator.Create(self, -1);

		walkablemidtex = args[1];
      
		While (it.Next())
		{
			Line current = it.curline;

			if (current)
			{
				if (current.v1.p == pos.xy || current.v2.p == pos.xy)
				{
					if (current.v2.p == pos.xy) // Check position/line order so that we make sure these are pushed in the right order into the array 
					{
						Lines.Insert(0, current);
					}
					else
					{
						Lines.Push(current);
					}

					if (walkablemidtex) // If you want the door to be passable in 3D space, it needs to be a 3D midtex - some blocking issues, unfortunately...  Doesn't stop hitscans.
					{
						current.flags |= Line.ML_3DMIDTEX;
						current.flags |= Line.ML_BLOCKSIGHT;
					}
					else // By default, the line will block everything
					{
						current.flags |= Line.ML_BLOCKING;
						current.flags |= Line.ML_BLOCKEVERYTHING;
					}

					lastindex = current.Index();
				}
			}
		}

		locknumber = args[0];
	}

	override void Touch(Actor toucher)
	{
		if (Activators.Find(toucher) == Activators.Size()) { Activators.Push(toucher); }
	}

	void Move(double dir)
	{
		if (dir < 0 && moveamt <= 0) { return; }
		else if (dir > 0 && moveamt >= maxmoveamt) { return; }

		dir = dir * movespeed;

		if (!Lines.Size()) { return; }

		if (Lines[0])
		{
			Lines[0].sidedef[0].AddTextureXOffset(1, dir);
			Lines[0].sidedef[1].AddTextureXOffset(1, -dir);
		}

		if (Lines[1])
		{
			Lines[1].sidedef[0].AddTextureXOffset(1, single ? dir : -dir);
			Lines[1].sidedef[1].AddTextureXOffset(1, single ? -dir : dir);
		}

		if (dir < 0 && moveamt < maxmoveamt / 2) // Door is opening
		{
			if (Lines[0])
			{
				if (walkablemidtex)
				{
					Lines[0].flags |= Line.ML_3DMIDTEX;
					Lines[0].flags |= Line.ML_BLOCKSIGHT;
				}
				else
				{
					Lines[0].flags |= Line.ML_BLOCKING;
					Lines[0].flags |= Line.ML_BLOCKEVERYTHING;
				}
			}

			if (Lines[1])
			{
				if (walkablemidtex)
				{
					Lines[1].flags |= Line.ML_3DMIDTEX;
					Lines[1].flags |= Line.ML_BLOCKSIGHT;
				}
				else
				{
					Lines[1].flags |= Line.ML_BLOCKING;
					Lines[1].flags |= Line.ML_BLOCKEVERYTHING;
				}
			}
		}
		else if (dir > 0 && moveamt > maxmoveamt / 2) // Door is closing
		{
			if (Lines[0])
			{
				if (walkablemidtex)
				{
					Lines[0].flags &= ~Line.ML_3DMIDTEX;
					Lines[0].flags &= ~Line.ML_BLOCKSIGHT;
				}
				else
				{
					Lines[0].flags &= ~Line.ML_BLOCKING;
					Lines[0].flags &= ~Line.ML_BLOCKEVERYTHING;
				}
			}

			if (Lines[1])
			{
				if (walkablemidtex)
				{
					Lines[1].flags &= ~Line.ML_3DMIDTEX;
					Lines[1].flags &= ~Line.ML_BLOCKSIGHT;
				}
				else
				{
					Lines[1].flags &= ~Line.ML_BLOCKING;
					Lines[1].flags &= ~Line.ML_BLOCKEVERYTHING;
				}
			}
		}

		if (dir != olddir) { A_PlaySound(ActiveSound, CHAN_7, 0.7); }

		moveamt = int(moveamt + dir);
		olddir = dir;
	}

	override void Tick()
	{
		Super.Tick();

		if (globalfreeze || level.Frozen) { return; }

		for (int i = 0; i < Activators.Size(); i++)
		{
			if (Activators[i])
			{
				double offsetangle = absangle(angle, Activators[i].angle);
				if (offsetangle > 90) { offsetangle = 180 - offsetangle; }

				if (
					(
						Distance2D(Activators[i]) <= Activators[i].Radius * 2 ||
						(
							Distance2D(Activators[i]) <= Radius &&
							(offsetangle < 50)
						)
					) &&
					(!locknumber || Activators[i].CheckKeys(locknumber, false))
				)
				{
					movetimeout = 70;
				}
				else { Activators.Delete(i); }
			}
		}

		if (movetimeout <= 0) { Move(-1); }
		else { Move(1); }

		if (movetimeout > 0) { movetimeout--; }
	}
}

class DoorHandlerSingle : DoorHandler
{
	Default
	{
		DoorHandler.MoveAmount 120;
		DoorHandler.SingleDoor 1;
		DoorHandler.ActivationRadius 64;
	}
}
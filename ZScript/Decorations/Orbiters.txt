class TOSFollower : Decoration
{
	double user_x;
	double user_y;
	double user_z;

	double user_xOffset;
	double user_yOffset;
	double user_zOffset;

	States
	{
		Spawn:
			UNKN A 0 {
				user_x = pos.x;
				user_y = pos.y;
				user_z = pos.z;

				A_Warp(AAPTR_MASTER, 0, 0, 0, angle, WARPF_NOCHECKPOSITION | WARPF_INTERPOLATE | WARPF_ABSOLUTEANGLE);

				user_xOffset = user_x - pos.x;
				user_yOffset = user_y - pos.y;
				user_zOffset = user_z - pos.z;
			}
			Goto Initial;
		Initial:
			"####" # 1 {
				A_Warp(AAPTR_MASTER, user_xOffset, user_yOffset, user_zOffset, angle, WARPF_NOCHECKPOSITION | WARPF_INTERPOLATE | WARPF_ABSOLUTEANGLE);
			}
			Loop;
	}
}

class TOSOrbit : Decoration
{
	//$Arg0 "Speed"
	//$Arg0ToolTip "How fast this orbiter moves"
	//$Arg0Type 0
	//Arg 1 = user_FlatOrbit - Flat orbit or pitched
	//Arg 2 = user_Radius - desired end radius
	//Arg 3 = user_OrbitRadius = Orbit latching radius - how far away to latch onto other (non-sun) TOSOrbit actors

	double user_Radius;
	double user_Pitch;
	double user_Roll;
	double user_SpeedMult;
	double user_Angle;
	double user_Offset;
	double user_OffsetTurn;
	double user_OrbitRadius;
	double user_z;
	double user_destZ;
	double user_Speed;

	int user_DoNotOrbitSun;
	int user_FlatOrbit;
	int user_Traveling;

	Default
	{
		+SOLID
		Radius 0;
	}
	States
	{
		Spawn:
			TOS1 A 10 {
				user_FlatOrbit = args[1];
				user_OrbitRadius = args[3] * Scale.X;
			}
		SetMaster:
			"####" # 1 {
				user_Speed = args[0] * 0.01 * (GetCVar("g_timelapse") + 1);
				user_Roll = Roll - user_Speed;
				user_Angle = Angle;
				if (!user_OrbitRadius) { user_OrbitRadius = Radius * 8 * Scale.X; }
				if (!user_DoNotOrbitSun) {
					if (CountProximity("TOSSun", 4096, CPXF_SETMASTER | CPXF_CLOSEST)) {
						return ResolveState("Initialize");
					} else {
						return ResolveState(null);
					}
				} else if (CountProximity("TOSOrbit", user_OrbitRadius, CPXF_SETMASTER | CPXF_FARTHEST | CPXF_ANCESTOR)) { 
					if (!CheckClass("TOSShipOrbiting", AAPTR_MASTER, TRUE)) {
						return ResolveState("Initialize");
					} else {
						return ResolveState(null);
					}
				} else {
					return ResolveState(null);
				}
			}
			"####" # 0 {
				user_Traveling = 1;

				if (user_SpeedMult == 0) {
					user_SpeedMult = 150;
				} else if (user_SpeedMult > 50) {
					user_SpeedMult--;
				}

				A_Warp(AAPTR_DEFAULT, user_Speed * user_SpeedMult, 0, 0, 0, WARPF_USECALLERANGLE | WARPF_INTERPOLATE);
				if (user_Speed != 0) {
					A_SetRoll(0, SPF_INTERPOLATE);
				} else if (bStandStill) {
					A_SetRoll(Roll + 0.1 * Scale.X, SPF_INTERPOLATE);
				}
			}
			Loop;
		Initialize:
			"####" # 1 {
				if (!user_Traveling) {
					A_FaceMaster(0, 270, -90, 0, FAF_MIDDLE);
					return ResolveState("Initialize.Resume");
				} else {
					user_SpeedMult = 0;
					user_Offset = GetAngle(GAF_RELATIVE, AAPTR_MASTER) - 90;
					user_OffsetTurn = abs(user_Offset) / 90;
					if (user_OffsetTurn < 1) { user_OffsetTurn = 1; }


					if (user_Offset) {
						if (user_Offset > 0) {
							A_SetAngle(angle += user_OffsetTurn);
						} else if (user_Offset < 0) {
							A_SetAngle(angle -= user_OffsetTurn);
						}

						A_Warp(AAPTR_DEFAULT, user_Speed * 25, 0, 0, 0, WARPF_USECALLERANGLE | WARPF_INTERPOLATE);

						return ResolveState(null);
					} else {
						return ResolveState("Initialize.Resume");
					}
				}
			}
			Loop;
		Initialize.Resume:
			"####" # 1 {
				user_Radius = GetDistance(FALSE, AAPTR_MASTER);

				if (!user_FlatOrbit) {
					if (user_Roll < 180) {
						A_SetRoll(user_Roll * user_Radius / 128, SPF_INTERPOLATE);
					} else {
						A_SetRoll(-((360 - user_Roll) * user_Radius / 128), SPF_INTERPOLATE);
					}
				}

				user_z = pos.z;

				user_pitch = atan(pos.z / user_Radius);

				A_Warp(AAPTR_MASTER, 0, user_Radius, 0, 0, WARPF_USECALLERANGLE | WARPF_INTERPOLATE);

				user_z = user_z - pos.z;

				A_Warp(AAPTR_MASTER, 0, user_Radius, user_z, 0, WARPF_USECALLERANGLE | WARPF_INTERPOLATE);

				if (!user_FlatOrbit) {
					user_z = user_z / (128 * scale.X); 
				}
			}
		Initial:
			"####" # 1 {
				if (!user_FlatOrbit) {
					A_Warp(AAPTR_MASTER, user_Pitch * cos(angle), user_Radius, user_Pitch * user_z * sin(angle), user_speed, WARPF_USECALLERANGLE | WARPF_INTERPOLATE, null, 0, 0);
				} else {
					A_Warp(AAPTR_MASTER, 0, user_Radius, user_z, user_Speed, WARPF_USECALLERANGLE | WARPF_INTERPOLATE, null, 0, 0);
				}

				if (args[2] > 0 && args[2] < user_Radius) {
					user_Radius--;
				}
			}
			Loop;
	}
}

class TOSPlanetLightOrange : TOSFollower { Default { +INVISIBLE } }
class TOSPLanetLightPink : TOSPlanetLightOrange {}
class TOSPLanetLightGreen : TOSPlanetLightOrange {}
class TOSPLanetLightBlue : TOSPlanetLightOrange {}

class TOSPlanet : Decoration
{
	double user_Radius;
	double user_z;
	double user_Speed;

	States
	{
		Spawn: //Not Initial; override defaults
			TOS1 A 0 NoDelay {
				if (CountProximity("TOSSun", 4096, CPXF_SETMASTER | CPXF_CLOSEST)) {
					user_Speed = args[2];
					user_Radius = GetDistance(FALSE, AAPTR_MASTER);
				}

				if (args[0] == 1) {
					return ResolveState("Station");
				} else if (args[0] == 2) {
					return ResolveState("DY100");
				} else if (args[0] == 3) {
					return ResolveState("Sun");
				} else {
					A_FaceMaster(0, 270, -90, 0, FAF_MIDDLE);
					user_z = pos.z;
					A_Warp(AAPTR_MASTER, 0, user_Radius, 0, 0, WARPF_NOCHECKPOSITION | WARPF_USECALLERANGLE | WARPF_INTERPOLATE);
					user_z = user_z - pos.z;
					return ResolveState("SpawnLoop");
				}
			}
		SpawnLoop:
			TOS1 A 1 Light("LargeOrangeLight") {
				A_Warp(AAPTR_MASTER, 0, user_Radius, user_z, user_Speed * 0.0001 * Scale.X, WARPF_NOCHECKPOSITION | WARPF_USECALLERANGLE | WARPF_INTERPOLATE);
			}
			Loop;
		Station:
			TOS1 B 35 A_RemoveChildren(TRUE, RMVF_EVERYTHING);
			Goto Spawn.Resume;
		DY100:
			TOS1 C 35 A_RemoveChildren(TRUE, RMVF_EVERYTHING);
			Goto Spawn.Resume;
		Sun:
			TOS1 D 35 BRIGHT A_RemoveChildren(TRUE, RMVF_EVERYTHING);
			Goto Spawn.Resume;
		Hidden:
			TNT1 A 35 A_RemoveChildren(TRUE, RMVF_EVERYTHING);
			Goto Spawn.Resume;
		Spawn.Resume:
			"####" # 1 A_Warp(AAPTR_MASTER, 0, user_Radius, user_z, user_Speed * 0.0001 * Scale.X, WARPF_NOCHECKPOSITION | WARPF_USECALLERANGLE | WARPF_INTERPOLATE);
			Loop;
	}
}

class TOSPlanetShadow : TOSOrbit
{
	Default
	{
		RenderStyle 'STYLE_Shaded';
	}
	States
	{
		Spawn: //Not Initial; override defaults
			TOS1 A 1 Light("PlanetLight") {
				A_Warp(AAPTR_MASTER, 0, 0, 0, 0, WARPF_NOCHECKPOSITION | WARPF_INTERPOLATE | WARPF_COPYPITCH);
				if (CountProximity("TOSSun", 8192, CPXF_SETTARGET | CPXF_CLOSEST)) {
					A_FaceTarget(0, 270, -90, 0, FAF_MIDDLE);
				} else {
					A_SetAngle(angle + 0.005, SPF_INTERPOLATE);
				}
			}
			Loop;
	}
}

class TOSShipOrbit : Decoration
{
	//$Sprite UNKNA0
	//$Arg3 "Orbiting Vessel Type"
	//$Arg3ToolTip "Type of vessel that will orbit this spot"
	//$Arg3Type 11
	//$Arg3Enum { 0 = "Enterprise"; 1 = "Shuttlecraft"; 2 = "DY100"; }

	double user_Radius;
	double user_Pitch;
	double user_Roll;
	double user_Speed;
	double user_z;

	States
	{
		Spawn:
			TNT1 A 10;
			TNT1 A 0 {
				user_Radius = args[0] * 1.0;
				user_Speed = args[2] * 0.01 * (GetCvar("g_timelapse") + 1);
				user_Roll = Roll;
				if (Roll < 180) {
					A_SetRoll(user_Roll * user_Radius / 128);
				} else {
					A_SetRoll(-((360 - user_Roll) * user_Radius / 128));
				}

				if (CountProximity("TOSPlanet", 256, CPXF_SETMASTER | CPXF_CLOSEST) || CountProximity("TOSOrbit", 256, CPXF_SETMASTER | CPXF_FARTHEST | CPXF_ANCESTOR)) {
					user_Radius = user_Radius - 16;
				} else {
					A_SpawnItemEx("OrbitCenter", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION | SXF_ISMASTER);
				}

				user_z = pos.z;

				user_pitch = atan(pos.z / user_Radius);

				A_Warp(AAPTR_MASTER, 0, user_Radius, 0, 0, WARPF_NOCHECKPOSITION | WARPF_USECALLERANGLE);

				user_z = user_z - pos.z;

				if (args[1] == 0) { user_z = user_z / (128 * scale.X); }

				if (args[3] == 1) {
					return ResolveState("Initial.Shuttle");
				} else if (args[3] == 2) {
					return ResolveState("Initial.DY100");
				} else {
					return ResolveState("Initial");
				}
			}
		Initial:
			TOS1 A 1 {
				if (args[1] == 0) {
					A_Warp(AAPTR_MASTER, user_Pitch * cos(angle), user_Radius, user_Pitch * user_z * sin(angle), user_Speed, WARPF_NOCHECKPOSITION | WARPF_USECALLERANGLE | WARPF_INTERPOLATE, null, 0, 0);
				} else {
					A_Warp(AAPTR_MASTER, 0, user_Radius, user_z, user_Speed, WARPF_NOCHECKPOSITION | WARPF_USECALLERANGLE | WARPF_INTERPOLATE, null, 0, 0);
				}
			}
			Loop;
		Initial.Shuttle:
			TOS1 Z 1;
			Goto Initial.Resume;
		Initial.DY100:
			TOS1 Y 1;
			Goto Initial.Resume;
		Initial.Resume:
			"####" # 1 {
				if (args[1] == 0) {
					A_Warp(AAPTR_MASTER, user_Pitch * cos(angle), user_Radius, user_Pitch * user_z * sin(angle), user_Speed, WARPF_NOCHECKPOSITION | WARPF_USECALLERANGLE | WARPF_INTERPOLATE, null, 0, 0);
				} else {
					A_Warp(AAPTR_MASTER, 0, user_Radius, user_z, user_Speed, WARPF_NOCHECKPOSITION | WARPF_USECALLERANGLE | WARPF_INTERPOLATE, null, 0, 0);
				}
			}
			Loop;
	}
}

class TOSSun : Decoration
{
	Default
	{
		Radius 72;
	}
	States
	{
		Spawn: //Not Initial; override defaults
			TOS1 A 0 NoDelay {
				user_scaleX = scale.X;
				user_scaleY = scale.Y;
				A_SetScale(scale.X * 2.333, scale.Y * 2.333);
				A_SpawnItemEx ("SunFlare", 0, 0, 0, 0, 0, 0, 0, SXF_SETMASTER | SXF_TRANSFERSCALE);
				A_SetScale(user_scaleX, user_scaleY);
			}
		Initial:
			TOS1 A 35 BRIGHT Light("SunLight");
			Loop;
	}
}

class TOSPlanetOrbit : TOSOrbit
{
	States
	{
		Spawn:
			TOS1 A 0 NoDelay {
				A_SpawnItemEx ("TOSPlanetShadow", 0, 0, 0, 0, 0, 0, 0, SXF_TRANSFERPITCH | SXF_TRANSFERROLL | SXF_SETMASTER | SXF_TRANSFERSCALE);
				A_SpawnItemEx ("TOSPlanetLightOrange", 0, 0, 0, 0, 0, 0, 0, SXF_TRANSFERPITCH | SXF_SETMASTER | SXF_TRANSFERSCALE);
			}
			Goto Super::SetMaster;
	}
}

class TOSPlanetOrbitPink : TOSOrbit
{
	States
	{
		Spawn:
			TOS1 A 0 NoDelay {
				A_SpawnItemEx ("TOSPlanetShadow", 0, 0, 0, 0, 0, 0, 0, SXF_TRANSFERPITCH | SXF_TRANSFERROLL | SXF_SETMASTER | SXF_TRANSFERSCALE);
				A_SpawnItemEx ("TOSPlanetLightPink", 0, 0, 0, 0, 0, 0, 0, SXF_TRANSFERPITCH | SXF_SETMASTER | SXF_TRANSFERSCALE);
			}
			Goto Super::SetMaster;
	}
}

class TOSPlanetOrbitGreen : TOSOrbit
{
	States
	{
		Spawn:
			TOS1 A 0 NoDelay {
				A_SpawnItemEx ("TOSPlanetShadow", 0, 0, 0, 0, 0, 0, 0, SXF_TRANSFERPITCH | SXF_TRANSFERROLL | SXF_SETMASTER | SXF_TRANSFERSCALE);
				A_SpawnItemEx ("TOSPlanetLightGreen", 0, 0, 0, 0, 0, 0, 0, SXF_TRANSFERPITCH | SXF_SETMASTER | SXF_TRANSFERSCALE);
			}
			Goto Super::SetMaster;
	}
}

class TOSPlanetOrbitBlue : TOSOrbit
{
	States
	{
		Spawn:
			TOS1 A 0 NoDelay {
				A_SpawnItemEx ("TOSPlanetShadow", 0, 0, 0, 0, 0, 0, 0, SXF_TRANSFERPITCH | SXF_TRANSFERROLL | SXF_SETMASTER | SXF_TRANSFERSCALE);
				A_SpawnItemEx ("TOSPlanetLightBlue", 0, 0, 0, 0, 0, 0, 0, SXF_TRANSFERPITCH | SXF_SETMASTER | SXF_TRANSFERSCALE);
			}
			Goto Super::SetMaster;
	}
}

class Spot : TOSFollower
{
	Default
	{
		+BRIGHT
	}
	States
	{
		Spawn:
			UNKN A 0;
			Goto Initial;
	}
}

class TOSMoonOrbit : TOSOrbit
{
	States
	{
		Spawn:
			TOS1 A 0 NoDelay {
				user_DoNotOrbitSun = 1;
				user_OrbitRadius = 128;
				A_SpawnItemEx ("TOSPlanetShadow", 0, 0, 0, 0, 0, 0, 0, SXF_TRANSFERPITCH | SXF_TRANSFERROLL | SXF_SETMASTER | SXF_TRANSFERSCALE);
			}
			Goto Super::SetMaster;
	}
}

class TOSSpacestationK7 : TOSOrbit
{
	Default
	{
		-SOLID
	}
	States
	{
		Spawn:
			TOS1 A 0 NoDelay {
				user_FlatOrbit = 1;
				A_SpawnItemEx ("Block16", 0.0, 0.0, 24.0, 0, 0, 0, 0, SXF_SETMASTER);
				A_SpawnItemEx ("Block28x16", 0.0, 0.0, 8.0, 0, 0, 0, 0, SXF_SETMASTER);
				A_SpawnItemEx ("Block64x8", 0.0, 0.0, 0.0, 0, 0, 0, 0, SXF_SETMASTER);
				A_SpawnItemEx ("Block", 0.0, 0.0, -8.0, 0, 0, 0, 0, SXF_SETMASTER);
				A_SpawnItemEx ("Block", 0.0, 0.0, -12.0, 0, 0, 0, 0, SXF_SETMASTER);
				A_SpawnItemEx ("Block12", 0.0, 0.0, -24.0, 0, 0, 0, 0, SXF_SETMASTER);
			}
			Goto Super::SetMaster;
	}
}

class TOSShipOrbiting : TOSOrbit
{
	States
	{
		Spawn:
			TNT1 A 5 NoDelay {
				user_DoNotOrbitSun = 1;
				user_FlatOrbit = 1;
				user_scaleX = scale.X;
				user_scaleY = scale.Y;
				A_SetScale(Scale.X * Radius / 32, Scale.Y * Radius / 32);
				A_SpawnItemEx ("WarpFlash", 0, 0, 0, 0, 0, 0, 0, SXF_TRANSFERPITCH | SXF_TRANSFERROLL | SXF_TRANSFERSCALE);
				A_SetScale(user_ScaleX, user_ScaleY);
			}
			TOS1 A 0;
			Goto Super::SetMaster;
	}
}

class TOSD7 : TOSShipOrbiting { Default { Radius 24; } }
class TOSDY100 : TOSShipOrbiting { Default { Radius 12; } }
class TOSEnterprise : TOSShipOrbiting { Default { Radius 32; } }
class TOSAnaxagoras : TOSShipOrbiting { Default { Radius 32; } }

class TOSPlanetOrbitEarth : TOSOrbit
{
	States
	{
		Spawn:
			TOS1 A 0 NoDelay {
				A_SpawnItemEx ("TOSPlanetShadow", 0, 0, 0, 0, 0, 0, 0, SXF_TRANSFERPITCH | SXF_TRANSFERROLL | SXF_SETMASTER | SXF_TRANSFERSCALE);
				A_SpawnItemEx ("TOSPlanetLightBlue", 0, 0, 0, 0, 0, 0, 0, SXF_TRANSFERPITCH | SXF_SETMASTER | SXF_TRANSFERSCALE);
			}
			Goto Super::SetMaster;
	}
}

//Radar heavily modified from initial version by cybermind

int TIDIndexStart = 10000;
int TIDIndex = 10000;

int mode=0;
int maxZdist = 256;
global int 1:kx[];
global int 2:ky[];
global int 3:kz[];

Function int GetSpeed (int tid)
{
	int x = GetActorX(tid);
	int y = GetActorY(tid);
	int z = GetActorZ(tid);

	int speed = PointDistance(x,y,z,kx[tid],ky[tid],kz[tid]);

	kx[tid] = GetActorX(tid);
	ky[tid] = GetActorY(tid);
	kz[tid] = GetActorZ(tid);

	Return speed;
}

Function void DrawRadar (int tid, int scale, int x1, int y1, int dist, int hud)
{
	If (scale == 0)
	{ //Clear the Radar
		HudMessage(s:""; 0, 30000, 0, 0, 0, 0);
		HudMessage(s:""; 0, 29999, 0, 0, 0, 0);
		HudMessage(s:""; 0, 29998, 0, 0, 0, 0);
		return;
	}

	int x, y, z, dx, dy, dz, da;

	SetHudSize(1024, 768, 0);

	int screenRatio = GetScreenWidth() * 1.0 / GetScreenHeight();
	x1 += (1024 - (768 * screenRatio / 1.0)) / 2; //Offset for widescreen resolutions

	SetFont("RadarBkg");
	If (hud > 0)
		HudMessage(s:"A"; HUDMSG_PLAIN, 30000, CR_UNTRANSLATED, (x1 << 16), (y1 << 16), 0.01);
	Else
		HudMessage(s:""; 0, 30000, 0, 0, 0, 0);

	SetFont("Marker");
	HudMessage(s:"A"; HUDMSG_PLAIN, 29999, CR_UNTRANSLATED, (x1 << 16), (y1 << 16), 0.01);
/*
	//Compass marker location algorithm derived from Enjay's Operation: Overlord
	int CompassX = -ActorCos(GetActorAngle(tid)) * dist / scale / 1.0 * 112 / 100;
	int CompassY = ActorCos(GetActorAngle(tid) + 0.25) * dist / scale / 1.0 * 112 / 100;

	SetFont("Marker_W");
	HudMessage(s:"A"; HUDMSG_PLAIN, 29998, CR_UNTRANSLATED, ((x1 + CompassX) << 16), ((y1 + CompassY) << 16), 0.01);
*/

	For (int i = TIDIndexStart; i < TIDIndex; ++i)
	{
		str graphic = "NULL";
		str color = "NULL";
		str text = "NULL";
		str textcolor = "TOSBrightRed";
		int alpha = 1.0;

		int isGoal = 0;
		int offScreen = 0;

		x = GetActorX(tid) - GetActorX(i);
		y = GetActorY(tid) - GetActorY(i);
		z = GetActorZ(tid) - GetActorZ(i);

//		If (abs(z) > maxZdist) maxZdist = abs(z);

		isGoal = CheckActorClass(i, "NavGoal");

		If (Distance(tid, i) <= dist || isGoal)
		{
			If (isGoal && Distance(tid, i) > dist * 112 / 100)
			{
				offScreen = 1;
				int angle = ((VectorAngle(x, y) - GetActorAngle(0) + 0.5) % 1.0);
				dx = x1 + (-cos(angle) * (dist * 112 / 100));
				dy = y1 + (cos(angle + 0.25) * (dist * 112 / 100));
			}
			Else
			{
				offScreen = 0;
				dx=((((FixedMul(x,cos(-GetActorAngle(0))))-(FixedMul(y,sin(-GetActorAngle(0)))))));
				dy=((((FixedMul(x,sin(-GetActorAngle(0))))+(FixedMul(y,cos(-GetActorAngle(0)))))));
			}

			dx /= scale;
			dx+=y1<<16; dx=dx>>16; dx=dx<<16;
			dy /= scale;
			dy+=x1<<16; dy=dy>>16; dy=dy<<16;

			da = (GetActorAngle(tid) - GetActorAngle(i)) / 0.125;
			If (da < 0) da = da + 8;

			if (isGoal != 0)
			{ //Navigation Goal Markers
				If (!offScreen)
					graphic = "Marker_O";

				color = "Marker_W";

				int fadeAmt = Distance(tid, i) / 64;

				alpha = (100 - fadeAmt) * 0.01;

				If (alpha < 0.5) alpha = 0.5;
			}
			else if (CheckFlag(i, "USESPECIAL") && !CheckActorClass(i, "TOSTurboliftHandle"))
			{ //Consoles and other useable things
				If (GetUserVariable(i, "user_uses") > 0)
				{
					text = "!";
					color = "Marker_D";
				}
			}
			else if (CheckActorClass(i, "TurboLiftMarker") > 0)
			{ //Turbolifts
				text = "T";
				textcolor = "TOSBrightBlue";
				color = "Marker_D";
			}
			else if (CheckActorClass(i, "TransporterMarker") > 0)
			{ //Transporters
				text = "*";
				textcolor = "TOSBrightOrange";
				color = "Marker_D";
			}
			else if ((GetActorProperty(i, APROP_Speed) == 0  && GetActorProperty(i, APROP_Invulnerable)) || GetActorProperty(i, APROP_Species) == "Decoration")
			{ //Decorations
				//color = "Marker_E";
			}
			else if (GetActorProperty(i, APROP_Speed) == 0  && GetActorProperty(i, APROP_SpawnHealth) == 1000)
			{ //Pickups
				graphic = "Marker_S";
				color = "Marker_B";
			}
			else if (GetActorProperty(i,APROP_Speed) > 0  && GetActorProperty(i, APROP_SpawnHealth) == 1000 && !CheckActorClass(i, "BaronOfHell"))
			{ //Projectiles
				graphic = StrParam(s:"Marker_", d:da);
				color = "Marker_Y";
			}
			else if (GetActorProperty(i, APROP_SpawnHealth) > 0 && GetActorProperty(i, APROP_Health) > 0)
			{ //Actors
				graphic = StrParam(s:"Marker_", d:da);
				If (GetActorProperty(i, APROP_Friendly))
					color = "Marker_G";
				Else
					color = "Marker_R";
			}
			else if (GetActorProperty(i, APROP_SpawnHealth) > 0 && GetActorProperty(i, APROP_Health) <= 0)
			{ //Dead Actors
				//color = "Marker_E";
			}

			If (StrCmp(color, "NULL") != 0)
			{
				SetFont(color);

				If (!isGoal)
				{
					If (z > 48) //Point is below player
						alpha = 0.9 - (abs(z) / maxZdist);
					Else If (z < -96) //Point is above player
						alpha = 0.9 - (abs(z) / maxZdist);
					Else
						alpha = 1.0;

					If (alpha > 1.0) alpha = 1.0;
					If (alpha < 0) alpha = 0;
				}
				HudMessage(s:"A"; HUDMSG_PLAIN | HUDMSG_ALPHA, i + 10000, CR_UNTRANSLATED, dy, dx, 0.1, alpha);
			}

			If (StrCmp(graphic, "NULL") != 0)
			{
				SetFont(graphic);
				HudMessage(s:"A"; HUDMSG_PLAIN | HUDMSG_ALPHA, i, CR_UNTRANSLATED, dy, dx, 0.1);
			}

			If (StrCmp(text, "NULL") != 0)
			{
				SetFont("TINYFONT");
				HudMessage(s:text; HUDMSG_PLAIN | HUDMSG_ALPHA | HUDMSG_COLORSTRING, i, textcolor, dy, dx, 0.1);
			}
		}
	}
}

Script "SetRadarTID" (void)
{
	Thing_ChangeTID(0, TIDIndex++);

/*
	While (CheckFlag(0, "USESPECIAL"))
	{
		If (GetUserVariable(0, "user_uses") > 0)
		{
			SpawnForced("Hint", GetActorX(0) + Cos(5), GetActorY(0) + Sin(5), GetActorZ(0) + GetActorFloorZ(0) + GetActorProperty(0, APROP_Height) + 48.0);

			Terminate;
		}
		Delay(35);
	}
*/
}
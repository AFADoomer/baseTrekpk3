#define CanvasWidth 3072
#define CanvasHeight 2304

//  Draws a string using the graphics directly; allows for alpha blending.
//    Simplified support - is all fixed-width
//
//  Example:
//    For a centered, standard message:
//      DrawNotification(strParam(l:"LOCK_2"), "FNT_Y", 4, 4);
//
//    For a more customized message:
//      DrawString("This is a message.", 0, 0, CanvasWidth * 1.0 / 2, CanvasHeight * 1.0 / 3, 4, "FNT_Y", 3, 0.85, 1.0, 4);
//
Function void DrawNotification(str strString, str strFont, int intSize, int intSpacing)
{
	DrawString(strString, 0, 0, CanvasWidth * 1.0 / 2, CanvasHeight * 1.0 / 3, intSize/*, strFont, 0*/, 0.85, 1.0, 0.0, 0.0, 1.0, intSpacing);
}

Function int DrawString(str strString, int flags, int msgID, int x, int y, int size/*, str strFontName, int intFontNamePadding*/, int intAlpha, int R, int G, int B, int intHoldTime, int intSpacing)
{
	int l = 0, col = 0, row = 0;
	int RInitial = R, GInitial = G, BInitial = B;
	int strLetter;
	str strLetterGraphic;
	str strColor = "";

	//Set Default Values
	flags = flags | HUDMSG_FADEINOUT | HUDMSG_NOTWITHFULLMAP | HUDMSG_ALPHA;
//	If (!strFontName || strFontName == "") {strFontName = "STCFN";}
//	If (!intFontNamePadding) {intFontNamePadding = 3;}
	int intFontNamePadding = 3;

	If (size < 0) size = 0;
	If (size > 8) size = 8;

	int scaledWidth = CanvasWidth / Exp(2, size);
	int scaledHeight = CanvasHeight / Exp(2, size);

	If (scaledWidth <= 0) scaledWidth = 10;
	If (scaledHeight <= 0) scaledHeight = 8;

	SetHudSize(scaledWidth, scaledHeight, 0);

	int xOffset = x - ((x / 1.0) * 1.0);
	int yOffset = y - ((y / 1.0) * 1.0);

	x = Floor(x);
	y = Floor(y);

	x = x / CanvasWidth * scaledWidth;
	y = y / CanvasHeight * scaledHeight;

	x = Floor(x);
	y = Floor(y);

	if (xOffset == 0)
		x = Floor(x - (strLen(strString) * intSpacing * 1.0 / 2));
	else if (xOffset == 0.2)
		x = Floor(x - (strLen(strString) * intSpacing * 1.0));

	While (l < strLen(strString))
	{
		strLetter = GetChar(strString, l);

		If (strLetter >= 32)
		{
//			strLetterGraphic = StrParam(s:strFontName, s:Pad(strLetter, intFontNamePadding));
/*
			SetFont(strLetterGraphic);
			HudMessage(s:"A"; flags, msgID * 128 + l, -1, x + (col * intSpacing * 1.0), y + (row * intSpacing * 2.0), intHoldTime, 0.25, 0.25, intAlpha);
*/

			If (R == G && G == B)
			{
				strLetterGraphic = StrParam(s:"STCFN", s:Pad(strLetter, intFontNamePadding));
				SetFont(strLetterGraphic);
				HudMessage(s:"A"; flags | HUDMSG_ADDBLEND, msgID * 256 + l, -1, x + (col * intSpacing * 1.0), y + (row * intSpacing * 2.0), intHoldTime, 0.25, 0.25, R);
			}
			Else
			{
				strLetterGraphic = StrParam(s:"FNT_R", s:Pad(strLetter, intFontNamePadding));
				SetFont(strLetterGraphic);
				HudMessage(s:"A"; flags | HUDMSG_ADDBLEND, msgID * 256 + l, -1, x + (col * intSpacing * 1.0), y + (row * intSpacing * 2.0), intHoldTime, 0.25, 0.25, R);

				strLetterGraphic = StrParam(s:"FNT_G", s:Pad(strLetter, intFontNamePadding));
				SetFont(strLetterGraphic);
				HudMessage(s:"A"; flags | HUDMSG_ADDBLEND, (msgID + 1) * 256 + l, -1, x + (col * intSpacing * 1.0), y + (row * intSpacing * 2.0), intHoldTime, 0.25, 0.25, G);

				strLetterGraphic = StrParam(s:"FNT_B", s:Pad(strLetter, intFontNamePadding));
				SetFont(strLetterGraphic);
				HudMessage(s:"A"; flags | HUDMSG_ADDBLEND, (msgID + 2) * 256 + l, -1, x + (col * intSpacing * 1.0), y + (row * intSpacing * 2.0), intHoldTime, 0.25, 0.25, B);
			}

			strLetterGraphic = StrParam(s:"FNT_K", s:Pad(strLetter, intFontNamePadding));
			SetFont(strLetterGraphic);
			HudMessage(s:"A"; flags, (msgID + 3) * 256 + l, -1, x + (col * intSpacing * 1.0), y + (row * intSpacing * 2.0), intHoldTime, 0.25, 0.25, intAlpha);
		}
		Else
		{
			Switch (strLetter)
			{
				Case 10: //Line Feed
				Case 13: //Carriage Return
					row++;
					col = -1;
				break;
				Case 28: //Color Change
					Switch (GetChar(strString, l + 1))
					{
						Case 91: //Left Bracket
							log(s:"\crSorry, custom color names aren't supported (yet?).");
							While (GetChar(strString, l + 1) != 93)
							{
								l++;
							}
							R = 256; G = 256; B = 256;
						break;
						Case 	97	: R = 	204	; G = 	51	; B = 	51	; break; //reddish brick
						Case 	98	: R = 	210	; G = 	180	; B = 	140	; break; //tan
						Case 	99	: R = 	204	; G = 	204	; B = 	204	; break; //gray
						Case 	100	: R = 	0	; G = 	204	; B = 	0	; break; //green
						Case 	101	: R = 	153	; G = 	102	; B = 	21	; break; //brown
						Case 	102	: R = 	255	; G = 	204	; B = 	0	; break; //gold
						Case 	103	: R = 	255	; G = 	85	; B = 	120	; break; //red
						Case 	104	: R = 	153	; G = 	153	; B = 	255	; break; //blue
						Case 	105	: R = 	255	; G = 	170	; B = 	0	; break; //orange
						Case 	106	: R = 	223	; G = 	223	; B = 	223	; break; //white -> light gray
						Case 	107	: R = 	246	; G = 	206	; B = 	57	; break; //k - yellow -> TOSGold
						Case 	108	: R = 	256	; G = 	256	; B = 	256	; break; //original colors -> bright white
						Case 	109	: R = 	0	; G = 	0	; B = 	0	; break; //black
						Case 	110	: R = 	13	; G = 	154	; B = 	236	; break; //light blue -> TOSBlue
						Case 	111	: R = 	255	; G = 	204	; B = 	153	; break; //cream
						Case 	112	: R = 	209	; G = 	216	; B = 	168	; break; //olive
						Case 	113	: R = 	0	; G = 	140	; B = 	0	; break; //dark green
						Case 	114	: R = 	128	; G = 	0	; B = 	0	; break; //dark red
						Case 	115	: R = 	102	; G = 	51	; B = 	51	; break; //dark brown
						Case 	116	: R = 	153	; G = 	102	; B = 	204	; break; //purple
						Case 	117	: R = 	128	; G = 	128	; B = 	128	; break; //dark gray
						Case 	118	: R = 	0	; G = 	221	; B = 	221	; break; //cyan
						Default		: R = RInitial	; G = GInitial	; B = BInitial	;
							log(s:"\crUnhandled escape character color code: \cl", c:GetChar(strString, l + 1));
						break;
					}

					R = R * 1.0 / 256;
					G = G * 1.0 / 256;
					B = B * 1.0 / 256;

					l++;
					col--;
				break;
				Default:
					log(s:"\crUnhandled escape character code: \cl", d:strLetter);
				break;
			}
		}

		l++;
		col++;
	}
	return msgID;
}

Function int IsLetter(int Character)
{
	int Temp = ((Character >= 65 && Character <= 90) || (Character >= 97 && Character <= 122));

	return Temp;
}

Function str ChangeCase(str String, int Type)
{
	int l = 0;

	int strLetter = GetChar(String, l);
	str Temp = "";

	While (l <= strLen(String))
	{
		strLetter = GetChar(String, l);

		If (IsLetter(strLetter))
		{
			Switch (Type)
			{
				Case 0: //To lower
					If (strLetter <= 90) strLetter = strLetter + 32;
				break;
				Case 1: //To upper
					If (strLetter >= 97) strLetter = strLetter - 32;
					break;
				Case 2: //Capitalize first letter
					If (l == 0)
						If (strLetter >= 97) strLetter = strLetter - 32;
				break;
			}
		}
		Temp = strParam(s:Temp, c:strLetter);
		l++;
	}

	return Temp;
}

Function int InStr (str String, str Find)
{
	int Temp = -1;

	For (int c = 0; c <= StrLen(String); c++)
	{
		If (GetChar(String, c) == GetChar(Find, 0))
		{
			Temp = c;
			break;
		}
	}

	return Temp;
}

Function str Mid(str String, int Start, int End)
{
	str Temp = "";

	For (int c = Start; c <= End; c++)
		Temp = StrParam(s:Temp, c:GetChar(String, c));

	return Temp;
}

Function str Right(str String, int Chars)
{
	return Mid(String, StrLen(String) - Chars, StrLen(String));
}

Function str Left(str String, int Chars)
{
	return Mid(String, 0, Chars - 1);
}

Function str Pad(int Input, int Digits)
{
	str strTemp = "";

	For (int p = 1; p <= Digits - strLen(strParam(d:Input)); p++)
	{
		strTemp = strParam(c:'0',s:strTemp);
	}

	return strParam(s:strTemp,d:Input);
}

Function int Exp (int x, int n)
{
	int y = 1;

	While (n-- > 0) y *= x;

	Return y;
}

Function int Floor(int Number)
{
	return Number & 0xFFFF0000;
}

Function int ActorCos(int angle)
{ //Derived from Enjay's Operation: Overlord
	angle %= 1.0;

	If (angle < 0)
		angle += 1.0;

	If(angle > 0.5)
		angle = -angle + 1.0;

	return Cos(angle);
}

Function int Abs(int x)
{
	If (x < 0)
		Return -x;
	Return x;
}

Function int Distance (int tid1, int tid2)
{
	int x, y, z, d;

	x = GetActorX(tid1) - GetActorX(tid2) >> 16; // Convert fixed point to integer
	y = GetActorY(tid1) - GetActorY(tid2) >> 16;
	z = GetActorZ(tid1) - GetActorZ(tid2) >> 16;

	d = sqrt( x*x + y*y + z*z );

	return d;
}

Function int PointDistance (int x1, int y1, int z1, int x2, int y2, int z2)
{
	int x, y, z, d;

	x = (x1 - x2) >> 16; // Convert fixed point to integer
	y = (y1 - y2) >> 16;
	z = (z1 - z2) >> 16;

	d = sqrt( x*x + y*y + z*z );

	Return d;
}

Function str Metric(int dist, int digits)
{
	str stringLeft, stringRight;

	If (digits < 0) digits = 0;

	int convert = Abs((dist / 1.0) * Exp(10, digits) / 40);

	str string = StrParam(d:convert);
	stringLeft = Mid(string, 0, StrLen(string) - digits - 1);

	If (digits > 0)
	{
		string = StrParam(s:"00000", s:string);
		stringRight = Right(string, digits);

		if (StrCmp(stringLeft, "") == 0) stringLeft = "0";
		if (StrCmp(stringRight, "") == 0) stringRight = "0";

		return StrParam(s:stringLeft, s:".", s:stringRight);
	}

	return StrParam(s:stringLeft);
}

Function void FadeToImage (str strImage, int holdTime, int inTime, int outTime, int allPlayers)
{
	SetHudSize(320, 200, 1);
	SetFont(strImage);
	If (allPlayers)
		HudMessageBold (s:"A"; 3, 0, -1, 160.0, 100.0, holdTime, inTime, outTime);
	Else
		HudMessage (s:"A"; 3, 0, -1, 160.0, 100.0, holdTime, inTime, outTime);
}

Function void Freeze(int Set)
{
	SetPlayerProperty(0, Set, PROP_NOTARGET);
	SetPlayerProperty (0, Set, PROP_TOTALLYFROZEN);
}

Function str ExpandLanguageString(str strString, str input1, str input2, str input3, str input4, str input5, str input6)
{
	int l = 2;
	str strTemp = "";

	For (int t = 0; t <= StrLen(strString); t++)
	{
		If (GetChar(strString, t) == '^')
		{
			str strType = GetChar(strString, t + 1);
			str strContent = "";

			Switch (strType)
			{
				Case '1': strContent = input1; break; //Inputs ^1-^6
				Case '2': strContent = input2; break;
				Case '3': strContent = input3; break;
				Case '4': strContent = input4; break;
				Case '5': strContent = input5; break;
				Case '6': strContent = input6; break;
				Case 'k': //Print a key binding.  e.g., ^k+use
					l = 2;
					str strLetter = GetChar(strString, t + l);

					While ((IsLetter(strLetter) || strLetter == '+') && t + l <= strLen(strString))
					{
						strLetter = GetChar(strString, t + l);

						If (IsLetter(strLetter) || strLetter == '+')
						{
							strContent = strParam(s:strContent, c:strLetter);
							l++;
						}
					}
					strContent = strParam(k:strContent);
				break;
				Case 'l': //Print the level's name.  e.g., ^l
					strContent = StrParam(n:PRINTNAME_LEVELNAME);
				break;
				Case 'm': //Print the level's lump name.  e.g., ^m
					strContent = StrParam(n:PRINTNAME_LEVEL);
				break;
				Case 'n': //Print the player's name.  e.g., ^n
					strContent = StrParam(n:0);
				break;
				Case 's': //Print the skill level name.  e.g., ^s
					strContent = StrParam(n:PRINTNAME_SKILL);
				break;
				default: //Invalid case
					strContent = "________";
				break;
			}

			strTemp = strParam(s:strTemp, s:strContent);

			t = t + l - 1;
		}
		Else
			strTemp = strParam(s:strTemp, c:GetChar(strString, t));

	}
	Return strTemp;
}

Script "GetActorViewHeight" (void)
{
	SetResultValue(GetActorViewHeight(0) >> 16);
}


global str 11:CutsceneData[];

global str 50:SplitData[];

Function void SplitString (str InputData, str separator)
{
	StrCpy(a:SplitData, InputData);

	int CurrentLetter = 0;
	int CurrentLength = 0;
	int Index = 0;

	For (int t = 0; t <= StrLen(InputData); t++)
	{
		If (SplitData[t] == separator)
		{
			CutsceneData[Index] = strMid(InputData, CurrentLetter, CurrentLength);
			Index++;
			CurrentLength = 0;
			CurrentLetter = t + 1;
		}
		Else
			CurrentLength++;
	}
}

global str 51:IntStringData[];

Function int IntFromString(str InputData)
{
	StrCpy(a:IntStringData, InputData);

	int CurrentLetter = 0;
	int Result = 0;

	For (int t = 0; t < StrLen(InputData); t++)
	{
		Result += pow(10, StrLen(InputData) - t - 1) * (IntStringData[t] - 48);
	}

	return Result;
}

function int pow (int x, int n)
{
	int y = 1;
	while (n-- > 0) y *= x;
	return y;
}

Function void ClearRange (int start, int end)
{
	int temp;

	If (start > end)
	{
		temp = start;
		start = end;
		end = temp;
	}
	For (int i = start; i <= end; i++)
	{
		HudMessage (s:""; 0, i, -1, 0.0, 0.0, 0);
	}
}

Function void WriteConsole (str strInput)
{
	HudMessage (s:strInput; HUDMSG_LOG | HUDMSG_ALPHA, 0, 0, 0, 0, 0, 0);
}
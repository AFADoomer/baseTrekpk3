class PhaserSpot : Actor
{
	double angleoffset;
	double fov;
	int firetime;
	int firecount;
	int timeout;
	bool independent;
	vector3 offsets;

	Default
	{
		+INVISIBLE;
		+NOBLOCKMAP;
		+NOGRAVITY;
		Height 0;
		Radius 0;
		Species "Starfleet";
		Scale 0.1;
	}

	States
	{
		Spawn:
			TNT1 A 1;
			TNT1 A 0 {
				if (master)
				{
					offsets = (RotateVector(master.Vec2To(self), -master.angle), pos.z - master.pos.z);
					angleoffset = angle - master.angle;

					bFriendly = master.bFriendly;
					species = master.species;
				}
			}
		SpawnLoop:
			TNT1 A 1;
			TNT1 A 0 {
				if (master) {
					A_Warp(AAPTR_MASTER, offsets.x * cos(master.pitch), offsets.y * cos(master.roll), offsets.z - offsets.x * sin(master.pitch) - offsets.y * sin(master.roll), angleoffset, WARPF_COPYPITCH | WARPF_COPYINTERPOLATION);

					let momaster = TrekEnemyFlier(master);

					if (momaster)
					{
						if (!independent) { target = momaster.target; }
						if (!fov) { fov = momaster.fov; }
						if (momaster.passive) { return ResolveState("SpawnLoop"); }
					}

					if (target && target == master) { target = null; }
				} else {
					if (!fov) { fov = 180.0; }
				}

				if (!target || target == master) { A_ChangeToCloserTarget(2048, fov); }

				if (target) {
					if (target.health <= 0 || target.bInvisible || target.alpha <= FRandom[CloakFlicker](0, 0.5)) { target = null; }
				}

				timeout--;

				if (target) {
					return ResolveState("WeaponFire");
				}
				return ResolveState(null);
			}
			Loop;
		WeaponFire:
			TNT1 A 0 {
				if (timeout <= 0 && absangle(AngleTo(target), angle) <= (fov / 2)) {
					if (!firetime) { firetime = Random[PhaserFire](35, 70); }

					if (firecount > firetime || GetDistance(target) > 2048) {
						timeout = 70;
						firetime = 0;
						firecount = 0;
					} else {
						double sweepamt = ((-firetime / 2) + firecount) / GetDistance(target) / 32;

						A_FirePhaser("LaserBeam_Ship", "SmallBlueLight", "PhaserHitS", angleoffset: cos(roll) * sweepamt, pitchoffset: sin(roll) * sweepamt);
						firecount++;
					}
				}
			}
			Goto SpawnLoop;
		Death:
			TNT1 A 1;
			Stop;
	}

	void A_FirePhaser(class<Actor> beam, class<Actor> light, class<Actor> hitpuff, int damage = 1, sound snd = "weapons/phaser_alt", int xoffset = 0, double zoffset = 0, double angleoffset = 0, double pitchoffset = 0)
	{
		double dist = Min(2048, GetDistance(target));

		A_PlaySound(snd, 0, 1.0);
		A_CustomRailgun(damage, xoffset, "", "", RGF_CENTERZ | RGF_NOPIERCING | RGF_FULLBRIGHT |  RGF_SILENT | RGF_EXPLICITANGLE, 1, 0, hitpuff, angleoffset, pitchoffset, dist, 4, 1.0, 0, beam, zoffset);
		A_CustomRailgun(0, xoffset, "", "", RGF_CENTERZ | RGF_NOPIERCING | RGF_FULLBRIGHT | RGF_SILENT | RGF_EXPLICITANGLE, 1, 0, "NoPuff", angleoffset, pitchoffset, dist, 1, FRandom(6.0, 8.0), 0, light, zoffset);
	}

	void A_FireTorpedo(class<Actor> torpedo, double xoffset = 0, double zoffset = 0, bool gravity = false)
	{
		let mo = A_SpawnProjectile(torpedo, zoffset, xoffset, Random[Torpedo](-1, 1), CMF_OFFSETPITCH | CMF_SAVEPITCH | CMF_BADPITCH, Random[Torpedo](-1, 1), AAPTR_TARGET);

		if (mo)
		{
			mo.species = species;
			mo.bMThruSpecies = True;
			mo.bNoGravity = !gravity;
			mo.master = self;
			mo.tracer = target;
		}
	}

	void A_ChangeToCloserTarget(double range = 2048, double fov = 0)
	{
		ThinkerIterator EnemyFinder = ThinkerIterator.Create("TrekEnemyFlier");
		Actor mo;

		target = null;

		while ( (mo = TrekEnemyFlier(EnemyFinder.Next())) )
		{
			if (mo.health <= 0 || mo.bDormant || mo.bMissile) { continue; }
			if (master) {
				if (mo == master || mo == master.target) { continue; }
			}
			if (mo.bFriendly == bFriendly) { continue; }
			if (mo.species == species) { continue; }
			if (mo.bInvisible) { continue; }
			if (mo.alpha < 0.25) { continue; }
			if (Distance3d(mo) > range) { continue; }
			if (fov && absangle(AngleTo(mo), angle) > (fov / 2)) { continue; }

			target = mo;
		}

		ThinkerIterator TorpedoFinder = ThinkerIterator.Create("PhotonGrenade");

		while ( (mo = PhotonGrenade(TorpedoFinder.Next())) )
		{
			if (mo.tracer != self) { continue; }
			if (mo.bInvisible) { continue; }
			if (mo.alpha < 0.25) { continue; }
			if (Distance3d(mo) > range) { continue; }
			if (fov && absangle(AngleTo(mo), angle) > (fov / 2)) { continue; }

			target = mo;
		}

		if (!bFriendly) //Check for players if not friendly...
		{
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				PlayerPawn mo = players[i].mo;
				if (playeringame[i] && mo)
				{
					if (players[i].cheats & CF_NOTARGET) { continue; }
					if (mo.alpha < 0.25) { continue; }
					if (Distance3d(mo) > range) { continue; }
					if (target && Distance3d(mo) > Distance3d(target)) { continue; }
					if (fov && absangle(AngleTo(mo), angle) > (fov / 2)) { continue; }

					target = mo;
				}
			}
		}
	}
}

class PhotonTorpedoSpot : PhaserSpot
{
	States
	{
		WeaponFire:
			TNT1 A 0 {
				if (timeout <= 0 && absangle(AngleTo(target), angle) <= (fov / 2) && GetDistance(target) < 2048) {
					A_FireTorpedo("PhotonTorpedo");
					timeout = 140;
				}
			}
			Goto SpawnLoop;
	}
}
class TrekEnemy : Actor
{
	int user_Ammo;
	int user_Health;
	int user_State;
	int user_Width;
	int user_Height;
	int user_Uses;
	int user_FireCount;
	int user_Stunned;
	int user_Weapon;
	double user_Angle;
	double user_Pitch;
	double user_Speed;

	Default
	{
		MONSTER;
		+FLOORCLIP;
		+NOTARGET;
		Health 75;
		Speed 6;
		Radius 10;
		Height 70;
		YScale 1.33;
		DeathHeight 0;
		Mass 100;
		Painchance 128;
		BloodColor "FF 00 00";
		DamageFactor "Trek", 0.0;
		Species "Enemy";
		Activation THINGSPEC_NoDeathSpecial;
		Obituary "%o was killed by an ill-defined replacement actor.";
		YScale 1.33;
	}

	States
	{
		Spawn:
			"####" A 0 NoDelay {
				ACS_NamedExecuteAlways("SetRadarTID",0);
				ACS_NamedExecuteAlways("A_SetupThing",0);

				if (user_Speed < 0) {
					Speed = 0;
				}
				user_Speed = Speed;

				user_ammo = Random[EnemyAmmo](0, 30);
			}
			"####" # 0 A_Jump(256, "Stand");
		Stand:
			"####" A 0 {
				user_State = 2;
				if (speed == 0) {
					return ResolveState("CrouchLook");
				}
				return ResolveState(null);
			}
		Stand.Loop:
			"####" # 1 A_LookEx (0, 0, 0, 2048, 0, "Chase");
			Loop;
		CheckSight:
			"####" # 0 A_CheckLOF("Missile.Shoot", CLOFF_SKIPOBSTACLES);
			"####" A 0 {
				return ResolveState("Return");
			}
		Wander:
			"####" # 0 {
				bNoRadiusDmg = False;
				user_State = 1;
				if (user_Speed == 0) {
					return ResolveState("Crouch");
				} else {
					Speed = user_speed;
					return ResolveState(null);
				}
			}
			"####" AAAAA 1 A_Chase (null, null);
			"####" AA 1;
			"####" BBBB 1 A_Chase (null, null);
			"####" CCCCC 1 A_Chase (null, null);
			"####" CC 1;
			"####" DDDD 1 A_Chase (null, null);
		Chase:
			"####" A 0 {
				ACS_NamedExecuteAlways("A_CheckFrightened");
				user_State = 1;
				if (waterlevel > 1) {
					bFloat = True;
					Speed /= 2;
					bNoGravity = True;
				} else {
					bFloat = False;
					bNoGravity = False;

					If (Speed == 0) {
						return ResolveState("Crouch");
					}

					Speed == user_Speed;
				}
				return ResolveState(null);
			}
			"####" AAAAA 1 A_Chase("CheckSight", "CheckSight");
			"####" AA 1;
			"####" BBBB 1 A_Chase("CheckSight", "CheckSight");
			"####" CCCCC 1 A_Chase("CheckSight", "CheckSight");
			"####" CC 1;
			"####" DDDD 1 A_Chase("CheckSight", "CheckSight");
			"####" # 0 {
				if (bFrightened)
				{
					return ResolveState("Frightened");
				}
				return ResolveState(null);
			}
			Loop;
		CrouchLook:
			"####" X 1 A_LookEx (0, 0, 0, 2048, 0, "Crouch");
			Loop;
		Crouch:
			"####" # 0 {
				if (user_Speed > 0 && A_CheckLOF("Return.Speed", CLOFF_FROMBASE, 0, 0, 0, 0, 24.0)) {
					return ResolveState("Return.Speed");
				} else {
					return ResolveState(null);
				}
			}
			"####" VVVWWW 1;
			"####" XXX 1 {
				Height = Height / 2;
				A_FaceTarget();
				A_SetTics(Random[Crouch](5, 52));
				bNoRadiusDmg = False;
				if (user_Ammo < 30) {
					user_Ammo += 10;
				}
			}
			"####" XW 1 {
				if (user_Speed > 0) {
					A_Chase(null, null, CHF_FASTCHASE);
				}
			}
			"####" X 35 {
				A_FaceTarget();
				A_SetTics(Random(35, 105));
			}
			"####" WWWVVV 1;
			"####" V 1 {
				A_SetTics(Random[Popup](5, 15));
				Height = Height * 2;
			}
			Goto CheckSight;
		Melee:
		Missile:
			"####" EE 3 {
				A_FaceTarget();
				if (waterlevel > 1) {
					return ResolveState("Chase");
				} else {
					return ResolveState(null);
				}
			}
		Missile.Shoot:
			"####" # 0 {
				Speed == user_Speed;

				if (user_ammo <= 0) {
					return ResolveState("Chase");
				}

				if (user_Weapon == 1) {
					if (GetDistance(TRUE) >= 256.0) {
						return ResolveState("Fire.Grenade");
					} else {
						return ResolveState("Fire");
					}
				} else if (user_Weapon == 2) {
					return ResolveState("Fire.Rifle");
				} else if (user_Weapon == 3) {
					return ResolveState("Fire.Phaser");
				} else {
					return ResolveState("Fire");
				}
			}
			"####" A 0 A_Jump(256, "Return");
		Fire:
			"####" # 0 A_JumpIf(user_FireCount > 3, "Return");
			"####" F 1 A_FireDisruptor();
			"####" EE 3 A_FaceTarget();
			"####" F 1 A_FireDisruptor(2);
			"####" EE 3 A_FaceTarget();
			"####" F 1 A_FireDisruptor();
			"####" EE 8 A_FaceTarget();
			"####" # 0 { user_FireCount++; }
			"####" # 0 A_JumpIfHealthLower(2, "Disintegrate",  AAPTR_TARGET);
			"####" A 0 A_Jump(128, "CheckSight");
			Goto Chase;
		Fire.Grenade:
			"####" # 0 A_Jump(128, "Fire");
			"####" F 1 A_FireDisruptorGrenade();
			"####" EE 3 A_FaceTarget();
			"####" A 0 A_Jump(256, "Wander");
		Fire.Rifle:
			"####" F 0 A_JumpIf(user_FireCount > 40, "Return");
			"####" F 1 A_FirePhaser("LaserBeam_P", "SmallPurpleLight", "PhaserHitW", 12, 2, "weapons/rifle");
			"####" A 0 A_Jump(256, "CheckSight");
		Fire.Phaser:
			"####" A 0 A_JumpIf(user_FireCount > 10, "Return");
			"####" F 1 A_FirePhaser("LaserBeam_R", "SmallRedLight", "PhaserDisintegrateHit");
			"####" A 0 A_Jump(256, "CheckSight");
		Return:
			"####" # 0 {
				A_StopSound(CHAN_WEAPON);
				user_FireCount = 0;
				if (user_ammo <= 0) {
					bFrightened = True;
				}
			}
			"####" # 0 A_CheckLOF("Return.Speed", CLOFF_FROMBASE, 0, 0, 0, 0, 24.0);
			"####" # 0 {
				if (Random(0, 256) < 128) {
					Speed = 0;
				} else {
					Speed = user_Speed;
				}
			}
			Goto Chase;
		Return.Speed:
			"####" # 0 {
				Speed = user_Speed;
			}
			Goto Chase;
		Pain:
			"####" G 3;
			"####" G 3 A_Pain;
			Goto Wander;
		Death:
			"####" H 5 {
				A_StopSound(CHAN_WEAPON); //Just in case
				A_CallSpecial(special, args[0], args[1], args[2], args[3], args[4]);
				A_NoBlocking();
			}
			"####" I 5 {
				A_Scream();
				if (user_Weapon == 2) {
					A_DropItem("PhaserRifle", user_ammo);
				} else if (user_Weapon == 3) {
					A_DropItem("PhaserType2", user_ammo);
				} else {
					A_DropItem("Disruptor", user_ammo);
				}
			}
			"####" JK 5;
			"####" L -1;
			Stop;
		Death.Stun:
			"####" H 5 {
				A_UnSetSolid();
				bShootable = False;
				A_StopSound(CHAN_WEAPON); //Just in case
			}
			"####" I 5 A_Scream();
			"####" JK 5;
			"####" L -1;
			Stop;
		XDeath:
			"####" M 5 {
				A_StopSound(CHAN_WEAPON); //Just in case
				A_CallSpecial(special, args[0], args[1], args[2], args[3], args[4]);
				A_NoBlocking();
			}
			"####" N 5 A_XScream;
			"####" OPQRST 5;
			"####" U -1;
			Stop;
		Raise:
			"####" K 5 {
				A_SetSolid();
				bShootable = True;
			}
			"####" JIH 5;
			Goto Chase;
		Disintegrate:
			"####" # 0 A_GiveInventory("Disintegration", 1, AAPTR_TARGET);
			"####" # 0 A_ClearTarget;
			Goto Wander;
		Frightened:
			"####" A 0 {
				if (user_ammo < 30)
				{
					user_Ammo += 5;
				}
			}
			"####" A 0 A_Jump(256, "Chase");
	}
}

extend class TrekEnemy
{
	void A_FireDisruptor(int variance = 1, int ammoamt = 1)
	{
		A_SpawnProjectile("DisruptorBolt", 60, 0, Random[Disruptor](-variance, variance), CMF_OFFSETPITCH | CMF_SAVEPITCH | CMF_BADPITCH, Random[Disruptor](-variance, variance), AAPTR_TARGET);
		user_ammo -= ammoamt;
	}

	void A_FireDisruptorGrenade(int variance = 5, int ammoamt = 10)
	{
		bNoRadiusDmg = True;
		A_SpawnProjectile("DisruptorGrenade", 60, 0, Random[Disruptor](-variance, variance), CMF_OFFSETPITCH | CMF_SAVEPITCH | CMF_BADPITCH, FRandom[Disruptor](variance, 15 * (GetZAt(0, 0, 0, GZF_CEILING) / 128.0)), AAPTR_TARGET);
		user_ammo -= ammoamt;
	}

	void A_FirePhaser(class<Actor> beam, class<Actor> light, class<Actor> hitpuff, int damage = 10, int ammoamt = 1, sound snd = "weapons/phaser")
	{
		A_PlaySound(snd, CHAN_WEAPON, 1.0, True);
		A_SpawnItemEx(beam, 14, 9, 50, 0, 0, 0, 0, SXF_NOCHECKPOSITION | SXF_ISTRACER | SXF_SETMASTER);
		A_SetScale(FRandom(0.7, 0.9), GetDistance(1, AAPTR_TARGET), AAPTR_TRACER);
		user_ammo -= ammoamt;
		A_CustomRailgun(damage, 0, "", "", RGF_CENTERZ | RGF_NOPIERCING | RGF_FULLBRIGHT, 1, 0, hitpuff, 0, 0, 2048, 4, 0, 0, light, 22);
		user_FireCount++;
		A_FaceTarget(0.1);
//May mess things up...  Need to test.
		A_StopSound(CHAN_WEAPON);
	}
}
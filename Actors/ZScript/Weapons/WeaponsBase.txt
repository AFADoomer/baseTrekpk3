Class TOSWeapon : Weapon
{
	int user_dropamount;
	int user_dropamount2;

	Default
	{
		+SHOOTABLE;
		+NODAMAGE;
		+NOBLOOD;
		+NOTAUTOAIMED;
		Radius 10;
		Height 20;
		Weapon.BobStyle "Alpha";
	}

	States
	{
		Spawn:
			TNT1 A 0 NoDelay {
				ACS_NamedExecuteAlways("SetRadarTID",0);
				if (bDropped) {
					return ResolveState("Spawn.Dropped");
				} else {
					return ResolveState(null);
				}
			}
			PHAS S -1;
			Stop;
		Spawn.Dropped:
			PHAS P -1;
			Stop;
		Ready:
			PHAS A 1 A_WeaponReady;
			Loop;
		Fire: //Weapons that aren't properly redefined won't work
		Deselect:
			"####" # 0 A_StopSound(CHAN_WEAPON);
			PHAS A 1 A_Lower;
			Loop;
		Select:
			PHAS A 1 A_Raise;
			Loop;
	}
}

extend class TOSWeapon
{
	action void A_FirePhaser(class<Actor> beam, class<Actor> light, class<Actor> hitpuff, int damage = 3, class<Actor> sputter = null)
	{
		A_FireBullets(0, 0, 1, 0, "MeasurePuff", FBF_NORANDOMPUFFZ, 999999);
		A_SpawnItemEx(beam, 0, 0, CallACS("GetActorViewHeight") / 2 + 8.0, 0, 0, 0, 0, SXF_NOCHECKPOSITION | SXF_ISTRACER | SXF_SETMASTER);
		A_SetScale(FRandom(0.95, 1.05), GetDistance(1, AAPTR_MASTER), AAPTR_TRACER);
		A_RailAttack(0, 0, 0, "", "", RGF_CENTERZ | RGF_NOPIERCING | RGF_FULLBRIGHT | RGF_SILENT, 0, "", 0, 0, 2048, 1, FRandom(6.0, 8.0), 0, light, 16);
		A_RailAttack(0, 0, 0, "", "", RGF_CENTERZ | RGF_NOPIERCING | RGF_FULLBRIGHT | RGF_SILENT, 0, "", 0, 0, 2048, 1, FRandom(6.0, 8.0), 0, "SmallBlueLight", 16);

		If (sputter)
		{
			A_RailAttack(damage, 0, 0, "", "", RGF_CENTERZ | RGF_NOPIERCING | RGF_FULLBRIGHT | RGF_SILENT, 0, hitpuff, 0, 0, 512, 0, 3.0, 0, sputter, 12);
		}
		Else
		{
			A_FireBullets(0, 0, 1, damage, hitpuff, FBF_USEAMMO | FBF_NORANDOMPUFFZ, 999999);
		}
	}

	override void PostBeginPlay()
	{
		if (Amount > 1)
		{
			float dropammofactor = G_SkillPropertyFloat(SKILLP_DropAmmoFactor);

			if (dropammofactor == -1) 
			{
				dropammofactor = 0.5;
			}

			AmmoGive1 = int(Amount * dropammofactor);
			Amount = 1;
		}
		Super.PostBeginPlay();
	}

	override Inventory CreateTossable ()
	{
		if (SisterWeapon != NULL && Default.SelectionOrder > SisterWeapon.Default.SelectionOrder) //If a 'better' weapon is a sister, make it the drop
		{
			return SisterWeapon.CreateTossable ();
		}

		// If self actor lacks a SpawnState, don't drop it. (e.g. A base weapon
		// like the fist can't be dropped because you'll never see it.)
		if (SpawnState == GetDefaultByType("Actor").SpawnState || SpawnState == NULL)
		{
			return NULL;
		}
		if (bUndroppable || bUntossable || Owner == NULL || Amount <= 0)
		{
			return NULL;
		}

		if (AmmoType1 != NULL)
		{
			let ammo1 = Ammo(Owner.FindInventory((class<Ammo>)(AmmoType1)));
		}

		if (AmmoType2 != NULL)
		{
			let ammo2 = Ammo(Owner.FindInventory((class<Ammo>)(AmmoType2)));
		}

		if (Amount == 1 && !bKeepDepleted)
		{
			int sisterammo1 = 0, sisterammo2 = 0;

			//Destroy Sister Weapon
			if (SisterWeapon != NULL)
			{
				sisterammo1 = SisterWeapon.Default.AmmoGive1;
				sisterammo2 = SisterWeapon.Default.AmmoGive2;
				SisterWeapon.SisterWeapon = NULL;
				SisterWeapon.Destroy ();
			}

			if (ammo1 != NULL)
			{
				AmmoGive1 = ammo1.Amount - sisterammo1;
				Owner.TakeInventory((class<Ammo>)(AmmoType1), ammo1.Amount);
			}

			if (ammo2 != NULL && AmmoType1 != AmmoType2)
			{
				AmmoGive2 = ammo2.Amount - sisterammo2;
				Owner.TakeInventory((class<Ammo>)(AmmoType2), ammo2.Amount);
			}

			BecomePickup ();
			DropTime = 30;
			bSpecial = bSolid = false;
			return self;
		}

		let copy = Weapon(Spawn (GetClass(), Owner.Pos, NO_REPLACE));
		if (copy != NULL)
		{
			copy.MaxAmount = MaxAmount;
			copy.Amount = 1;
			copy.DropTime = 30;
			copy.bSpecial = copy.bSolid = false;
			copy.AmmoGive1 = 0;
			copy.AmmoGive2 = 0;
			Amount--;
		}
		return copy;
	}
}
class TOSNPC : Actor
{
	int user_FireCount;
	int user_static;
	int user_wasstatic;
	int user_Ammo;
	int user_Health;
	int user_Width;
	int user_Height;
	int user_Uses;
	int user_Float;
	double user_speed;
	double user_angle;
	double user_x;
	double user_y;

	default
	{
		MONSTER;

		+TELESTOMP
		+FRIENDLY
		+PICKUP
		+JUMPDOWN
		+ACTIVATEIMPACT
		+FLOORCLIP
		+NOTARGET
		-COUNTKILL

		DeathHeight 0;
		Mass 100;
		BloodColor "FF 00 00";
		DamageFactor "Trek", 0.0;
		Tag "Unknown NPC";
		Obituary "%o was killed by an ill-defined replacement actor.";
		YScale 1.33;
		Health 100;
		PainChance 256;
		Speed 4;
		Radius 12;
		Height 64;
		MeleeThreshold 128;
		MaxStepHeight 8;
	}

	States
	{
		Spawn:
			TNT1 A 0 NoDelay {
				ACS_NamedExecuteAlways("SetRadarTID",0, tid);
				ACS_NamedExecuteAlways("A_SetupThing",0);

				user_angle = angle;
				user_x = pos.x;
				user_y = pos.y;
				user_speed = speed;
			}
		Stand:
			C021 A 0 {
				speed = 0;
				if (args[2] == 1) {
					user_static = 1;
					return ResolveState("Seated.Console");
				} else if (args[2] == 2) {
					return ResolveState("Seated");
				} else if (args[2] == 3) {
					return ResolveState("Seated.Eating");
				}
				return ResolveState(null);
			}
		Stand.Loop:
			C021 ABCDE 26 A_Look;
			Loop;
		Turn:
			C009 ABCDEF 3 A_TurnFace();
			Loop;
		Turn2:
			C010 ABCDEF 3 A_TurnFace();
			Loop;
		See:
			C004 A 0 {
				speed = user_speed;
			}
		See.Loop:
			"####" AAAA Random(1, 2) A_Chase("Phaser", "Phaser");
			"####" BBBB Random(1, 2) A_Chase("Phaser", "Phaser");
			"####" CCCC Random(1, 2) A_Chase("Phaser", "Phaser");
			"####" DDDD Random(1, 2) A_Chase("Phaser", "Phaser");
/*
			"####" A 0 { bFrightened = TRUE; }
			"####" A 0 A_JumpIfCloser(256.0, "See")
			"####" A 0 A_JumpIf(health < 35, "See")
			"####" A 0 A_JumpIfInventory("Charge", 16, 1)
*/
			Loop;
		Wander:
			C007 AAA 1 A_Wander(CHF_NORANDOMTURN);
			"####" A 0 A_Look;
			"####" BBB 1 A_Wander(CHF_NORANDOMTURN);
			"####" A 0 A_Look;
			"####" CCC 1 A_Wander(CHF_NORANDOMTURN);
			"####" A 0 A_Look;
			"####" DDD 1 A_Wander(CHF_NORANDOMTURN);
			"####" A 0 A_Look;
			"####" EEE 1 A_Wander(CHF_NORANDOMTURN);
			"####" A 0 A_Look;
			"####" FFF 1 A_Wander(CHF_NORANDOMTURN);
			"####" A 0 A_Look;
			"####" A 0 A_SetAngle(angle + Random(-1, 1));
			Loop;
		Pain:
			C013 A 8 { bFrightened = TRUE; }
		Phaser:
			C001 ABC 4 A_Jump(128, "Phaser.Stun", "Phaser.Disintegrate");
		Phaser.Normal:
			"####" A 0 { bFrightened = 0; }
			"####" A 0 A_JumpIf(user_FireCount > 10, "Return");
			"####" D 1 {
				A_SpawnItemEx("LaserBeam_B", 14, 9, 50, 0, 0, 0, 0, SXF_NOCHECKPOSITION | SXF_ISTRACER | SXF_SETMASTER | SXF_TRANSFERPITCH);
				A_SetScale(FRandom(0.7, 0.9), GetDistance(1, AAPTR_TARGET) - 14, AAPTR_TRACER);
				A_CustomRailgun(3, 9, "", "", RGF_CENTERZ | RGF_NOPIERCING | RGF_FULLBRIGHT, 1, 0, "PhaserHit", 0, 0, 2048, 4, FRandom(6.0, 8.0), 0, "SmallBlueLight", 22);
			}
			"####" A 0 { user_FireCount = user_FireCount + 1; }
			"####" A 0 A_FaceTarget(0.1);
			"####" A 0 A_CheckLOF("Phaser.Normal");
		Phaser.Stun:
			"####" A 0 { bFrightened = 0; }
			"####" A 0 A_JumpIf(user_FireCount > 10, "Return");
			"####" D 1 {
				A_SpawnItemEx("LaserBeam_O", 14, 9, 50, 0, 0, 0, 0, SXF_NOCHECKPOSITION | SXF_ISTRACER | SXF_SETMASTER | SXF_TRANSFERPITCH);
				A_SetScale(FRandom(0.7, 0.9), GetDistance(1, AAPTR_TARGET) - 14, AAPTR_TRACER);
				A_CustomRailgun(1, 9, "", "", RGF_CENTERZ | RGF_NOPIERCING | RGF_FULLBRIGHT, 1, 0, "PhaserStunHit", 0, 0, 2048, 4, FRandom(6.0, 8.0), 0, "SmallOrangeLight", 22);
			}
			"####" A 0 { user_FireCount = user_FireCount + 1; }
			"####" A 0 A_FaceTarget(0.1);
			"####" A 0 A_CheckLOF("Phaser.Stun");
		Phaser.Disintegrate:
			"####" A 0 { bFrightened = 0; }
			"####" A 0 A_JumpIf(user_FireCount > 10, "Return");
			"####" D 1 {
				A_SpawnItemEx("LaserBeam_R", 14, 9, 50, 0, 0, 0, 0, SXF_NOCHECKPOSITION | SXF_ISTRACER | SXF_SETMASTER | SXF_TRANSFERPITCH);
				A_SetScale(FRandom(0.7, 0.9), GetDistance(1, AAPTR_TARGET) - 14, AAPTR_TRACER);
				A_CustomRailgun(10, 9, "", "", RGF_CENTERZ | RGF_NOPIERCING | RGF_FULLBRIGHT, 1, 0, "PhaserDisintegrateHit", 0, 0, 2048, 4, FRandom(6.0, 8.0), 0, "SmallRedLight", 22);
			}
			"####" A 0 { user_FireCount = user_FireCount + 1; }
			"####" A 0 A_FaceTarget(0.1);
			"####" A 0 A_CheckLOF("Phaser.Disintegrate");
		Return:
			"####" A 0 { user_FireCount = 0; }
			Goto See;
		Disintegrate:
			"####" A 0 A_GiveInventory("Disintegration", 1, AAPTR_TARGET);
			"####" # 0 A_ClearTarget;
			Goto Wander;
		XDeath:
			C014 ABCDEFG 1;
			"####" H 1 A_Scream;
			"####" IJKLMNO 1;
			"####" P -1;
			Stop;
		Death:
			C013 ABCDEFG 1;
			"####" H 1 A_Scream;
			"####" IJKLMNOPQRSTUVW 1;
			"####" X -1;
			Stop;
		Jump:
			C040 ABC 4 A_JumpIf(vel.z < 0, "Jump.Loop");
		Jump.Loop:
			C040 C 8;
			TNT1 A 0 A_CheckFloor("Land");
			TNT1 A 0 A_JumpIf(vel.z == 0, "Land");
			Loop;
		Land:
			TNT1 A 0 A_PlaySound("Player/Land");
			C040 BA 2;
			Goto Stand;
		SitDown:
			C039 DCBA 4;
			Goto Seated;
		Seated:
			C030 ABCDEF Random(16, 32) A_Look;
			"####" # 0 {
				if (args[2] == 0 || bDORMANT) {
					return ResolveState("Seated"); //Was set via script, so stay static...
				} else if (args[2] == 3) {
					return ResolveState("Seated.Eating");
				} else {
					if (Random(0, 255) > 128) {
						if(Random(0, 255) > 128) {
							return ResolveState("Seated.Gesture");
						}
						return ResolveState("Seated.HandtoTable");
					}
					return ResolveState("Seated");
				}
			}
		Seated.Eating:
			"####" # 0 {
				if (Random(0, 255) > 128) {
					int r = Random(0, 255);
					if(r > 85) {
						return ResolveState("Seated.Gesture");
					} else if (r > 170) {
						return ResolveState("Seated.HandtoTable");
					}
					return ResolveState("Seated.Eat");
				}
				return ResolveState("Seated");
			}
			Goto Seated;
		Seated.HandtoLap:
			C031 ABC Random(16, 32);
			Goto Seated;
		Seated.HandtoTable:
			C032 AB Random(16, 32);
			C032 C Random(35, 105);
			Goto Seated.HandtoLap;
		Seated.Gesture:
			C033 ABCD 16;
			Goto Seated;
		Seated.Eat:
			C034 ABCD 16;
			Goto Seated;
		Seated.Console:
			C036 ABCDEFGHIJKLMN Random(16, 32) A_Look;
			"####" # 0 A_Jump(128, "Seated.ConsoleCenter", "Seated.ConsoleLeft", "Seated.ConsoleRight");
			Goto Seated.Console;
		Seated.ConsoleCenter:
			C035 ABCDEFGH Random(16, 32) A_Look;
			Goto Seated.Console;
		Seated.ConsoleLeft:
			C037 ABCDEFGHIJKL Random(8, 16) A_Look;
			Goto Seated.Console;
		Seated.ConsoleRight:
			C038 ABCDEFGHIJ Random(8, 16) A_Look;
			Goto Seated.Console;
		StandUp:
			C039 ABCD 8;
			Goto Stand;
		Stand.Crossed:
			C018 ABCD 8;
			Loop;
		Stand.Intercom:
			C019 ABCDEFGHIJK 3;
			Goto Stand;
		Stand.Communicator:
			C020 ABCD 6;
			Loop;
		Stand.GestureLeft:
			C022 ABCD 8;
			Goto Stand;
		Stand.GestureRight:
			C023 ABCD 8;
			Goto Stand;
		Stand.Console:
			C025 ABCDEFGHIJKLMN Random(16, 32) A_Look;
			"####" # 0 A_Jump(128, "Stand.ConsoleCenter", "Stand.ConsoleLeft", "Stand.ConsoleRight");
			Goto Stand.Console;
		Stand.ConsoleCenter:
			C024 ABCDEFGH Random(16, 32) A_Look;
			Goto Stand.Console;
		Stand.ConsoleLeft:
			C026 ABCDEFGHIJKL Random(8, 16) A_Look;
			Goto Stand.Console;
		Stand.ConsoleRight:
			C027 ABCDEFGHIJ Random(8, 16) A_Look;
			Goto Stand.Console;
		Stand.Tricorder:
			C028 ABCDEF 4;
			Loop;
		Stand.WallConsole:
			C029 ABCDEFGHI 4;
			Goto Stand;
		Kneel:
			C015 ABCDEFGH 4;
		Kneel.Loop:
			C015 H 8;
			Loop;
		KneelUp:
			C015 GFEDCBA 4;
			Goto Stand;
		Parade: //Because stupid error checking...
			C001 A 2;
			C002 A 2;
			C003 A 2;
			C004 A 2;
			C005 A 2;
			C006 A 2;
			C007 A 2;
			C008 A 2;
			C009 A 2;
			C010 A 2;
			C011 A 2;
			C012 A 2;
			C013 A 2;
			C014 A 2;
			C015 A 2;
			C016 A 2;
			C017 A 2;
			C018 A 2;
			C019 A 2;
			C020 A 2;
			C021 A 2;
			C022 A 2;
			C023 A 2;
			C024 A 2;
			C025 A 2;
			C026 A 2;
			C027 A 2;
			C028 A 2;
			C029 A 2;
			C030 A 2;
			C031 A 2;
			C032 A 2;
			C033 A 2;
			C034 A 2;
			C035 A 2;
			C036 A 2;
			C037 A 2;
			C038 A 2;
			C039 A 2;
			C040 A 2;
			C100 A 2;
			C101 A 2;
			C102 A 2;
			C103 A 2;
			C104 A 2;
			C105 A 2;
			C106 A 2;
			C107 A 2;
			C108 A 2;
			C109 A 2;
			C110 A 2;
			C111 A 2;
			C112 A 2;
			C113 A 2;
			C114 A 2;
			C115 A 2;
			C116 A 2;
			C117 A 2;
			C118 A 2;
			C119 A 2;
			C120 A 2;
			C121 A 2;
			C122 A 2;
			C123 A 2;
			C124 A 2;
			C125 A 2;
			C126 A 2;
			C127 A 2;
			C128 A 2;
			C129 A 2;
			C130 A 2;
			C131 A 2;
			C132 A 2;
			C133 A 2;
			C134 A 2;
			C135 A 2;
			C136 A 2;
			C137 A 2;
			C138 A 2;
			C139 A 2;
			C140 A 2;
			C200 A 2;
			C201 A 2;
			C202 A 2;
			C203 A 2;
			C204 A 2;
			C205 A 2;
			C206 A 2;
			C207 A 2;
			C208 A 2;
			C209 A 2;
			C210 A 2;
			C211 A 2;
			C212 A 2;
			C213 A 2;
			C214 A 2;
			C215 A 2;
			C216 A 2;
			C217 A 2;
			C218 A 2;
			C219 A 2;
			C220 A 2;
			C221 A 2;
			C222 A 2;
			C223 A 2;
			C224 A 2;
			C225 A 2;
			C226 A 2;
			C227 A 2;
			C228 A 2;
			C229 A 2;
			C230 A 2;
			C231 A 2;
			C232 A 2;
			C233 A 2;
			C234 A 2;
			C235 A 2;
			C236 A 2;
			C237 A 2;
			C238 A 2;
			C239 A 2;
			C240 A 2;
			C300 A 2;
			C301 A 2;
			C302 A 2;
			C303 A 2;
			C304 A 2;
			C305 A 2;
			C306 A 2;
			C307 A 2;
			C308 A 2;
			C309 A 2;
			C310 A 2;
			C311 A 2;
			C312 A 2;
			C313 A 2;
			C314 A 2;
			C315 A 2;
			C316 A 2;
			C317 A 2;
			C318 A 2;
			C319 A 2;
			C320 A 2;
			C321 A 2;
			C322 A 2;
			C323 A 2;
			C324 A 2;
			C325 A 2;
			C326 A 2;
			C327 A 2;
			C328 A 2;
			C329 A 2;
			C330 A 2;
			C331 A 2;
			C332 A 2;
			C333 A 2;
			C334 A 2;
			C335 A 2;
			C336 A 2;
			C337 A 2;
			C338 A 2;
			C339 A 2;
			C340 A 2;
			C400 A 2;
			C401 A 2;
			C402 A 2;
			C403 A 2;
			C404 A 2;
			C405 A 2;
			C406 A 2;
			C407 A 2;
			C408 A 2;
			C409 A 2;
			C410 A 2;
			C411 A 2;
			C412 A 2;
			C413 A 2;
			C414 A 2;
			C415 A 2;
			C416 A 2;
			C417 A 2;
			C418 A 2;
			C419 A 2;
			C420 A 2;
			C421 A 2;
			C422 A 2;
			C423 A 2;
			C424 A 2;
			C425 A 2;
			C426 A 2;
			C427 A 2;
			C428 A 2;
			C429 A 2;
			C430 A 2;
			C431 A 2;
			C432 A 2;
			C433 A 2;
			C434 A 2;
			C435 A 2;
			C436 A 2;
			C437 A 2;
			C438 A 2;
			C439 A 2;
			C440 A 2;
			C500 A 2;
			C501 A 2;
			C502 A 2;
			C503 A 2;
			C504 A 2;
			C505 A 2;
			C506 A 2;
			C507 A 2;
			C508 A 2;
			C509 A 2;
			C510 A 2;
			C511 A 2;
			C512 A 2;
			C513 A 2;
			C514 A 2;
			C515 A 2;
			C516 A 2;
			C517 A 2;
			C518 A 2;
			C519 A 2;
			C520 A 2;
			C521 A 2;
			C522 A 2;
			C523 A 2;
			C524 A 2;
			C525 A 2;
			C526 A 2;
			C527 A 2;
			C528 A 2;
			C529 A 2;
			C530 A 2;
			C531 A 2;
			C532 A 2;
			C533 A 2;
			C534 A 2;
			C535 A 2;
			C536 A 2;
			C537 A 2;
			C538 A 2;
			C539 A 2;
			C540 A 2;
			E001 A 2;
			E002 A 2;
			E003 A 2;
			E004 A 2;
			E005 A 2;
			E006 A 2;
			E007 A 2;
			E008 A 2;
			E009 A 2;
			E010 A 2;
			E011 A 2;
			E012 A 2;
			E013 A 2;
			E014 A 2;
			E015 A 2;
			E016 A 2;
			E017 A 2;
			E018 A 2;
			E019 A 2;
			E020 A 2;
			E021 A 2;
			E022 A 2;
			E023 A 2;
			E024 A 2;
			E025 A 2;
			E026 A 2;
			E027 A 2;
			E028 A 2;
			E029 A 2;
			E030 A 2;
			E031 A 2;
			E032 A 2;
			E033 A 2;
			E034 A 2;
			E035 A 2;
			E036 A 2;
			E037 A 2;
			E038 A 2;
			E039 A 2;
			E040 A 2;
			E100 A 2;
			E101 A 2;
			E102 A 2;
			E103 A 2;
			E104 A 2;
			E105 A 2;
			E106 A 2;
			E107 A 2;
			E108 A 2;
			E109 A 2;
			E110 A 2;
			E111 A 2;
			E112 A 2;
			E113 A 2;
			E114 A 2;
			E115 A 2;
			E116 A 2;
			E117 A 2;
			E118 A 2;
			E119 A 2;
			E120 A 2;
			E121 A 2;
			E122 A 2;
			E123 A 2;
			E124 A 2;
			E125 A 2;
			E126 A 2;
			E127 A 2;
			E128 A 2;
			E129 A 2;
			E130 A 2;
			E131 A 2;
			E132 A 2;
			E133 A 2;
			E134 A 2;
			E135 A 2;
			E136 A 2;
			E137 A 2;
			E138 A 2;
			E139 A 2;
			E140 A 2;
			E200 A 2;
			E201 A 2;
			E202 A 2;
			E203 A 2;
			E204 A 2;
			E205 A 2;
			E206 A 2;
			E207 A 2;
			E208 A 2;
			E209 A 2;
			E210 A 2;
			E211 A 2;
			E212 A 2;
			E213 A 2;
			E214 A 2;
			E215 A 2;
			E216 A 2;
			E217 A 2;
			E218 A 2;
			E219 A 2;
			E220 A 2;
			E221 A 2;
			E222 A 2;
			E223 A 2;
			E224 A 2;
			E225 A 2;
			E226 A 2;
			E227 A 2;
			E228 A 2;
			E229 A 2;
			E230 A 2;
			E231 A 2;
			E232 A 2;
			E233 A 2;
			E234 A 2;
			E235 A 2;
			E236 A 2;
			E237 A 2;
			E238 A 2;
			E239 A 2;
			E240 A 2;
			E300 A 2;
			E301 A 2;
			E302 A 2;
			E303 A 2;
			E304 A 2;
			E305 A 2;
			E306 A 2;
			E307 A 2;
			E308 A 2;
			E309 A 2;
			E310 A 2;
			E311 A 2;
			E312 A 2;
			E313 A 2;
			E314 A 2;
			E315 A 2;
			E316 A 2;
			E317 A 2;
			E318 A 2;
			E319 A 2;
			E320 A 2;
			E321 A 2;
			E322 A 2;
			E323 A 2;
			E324 A 2;
			E325 A 2;
			E326 A 2;
			E327 A 2;
			E328 A 2;
			E329 A 2;
			E330 A 2;
			E331 A 2;
			E332 A 2;
			E333 A 2;
			E334 A 2;
			E335 A 2;
			E336 A 2;
			E337 A 2;
			E338 A 2;
			E339 A 2;
			E340 A 2;
			E400 A 2;
			E401 A 2;
			E402 A 2;
			E403 A 2;
			E404 A 2;
			E405 A 2;
			E406 A 2;
			E407 A 2;
			E408 A 2;
			E409 A 2;
			E410 A 2;
			E411 A 2;
			E412 A 2;
			E413 A 2;
			E414 A 2;
			E415 A 2;
			E416 A 2;
			E417 A 2;
			E418 A 2;
			E419 A 2;
			E420 A 2;
			E421 A 2;
			E422 A 2;
			E423 A 2;
			E424 A 2;
			E425 A 2;
			E426 A 2;
			E427 A 2;
			E428 A 2;
			E429 A 2;
			E430 A 2;
			E431 A 2;
			E432 A 2;
			E433 A 2;
			E434 A 2;
			E435 A 2;
			E436 A 2;
			E437 A 2;
			E438 A 2;
			E439 A 2;
			E440 A 2;
			E500 A 2;
			E501 A 2;
			E502 A 2;
			E503 A 2;
			E504 A 2;
			E505 A 2;
			E506 A 2;
			E507 A 2;
			E508 A 2;
			E509 A 2;
			E510 A 2;
			E511 A 2;
			E512 A 2;
			E513 A 2;
			E514 A 2;
			E515 A 2;
			E516 A 2;
			E517 A 2;
			E518 A 2;
			E519 A 2;
			E520 A 2;
			E521 A 2;
			E522 A 2;
			E523 A 2;
			E524 A 2;
			E525 A 2;
			E526 A 2;
			E527 A 2;
			E528 A 2;
			E529 A 2;
			E530 A 2;
			E531 A 2;
			E532 A 2;
			E533 A 2;
			E534 A 2;
			E535 A 2;
			E536 A 2;
			E537 A 2;
			E538 A 2;
			E539 A 2;
			E540 A 2;
			S001 A 2;
			S002 A 2;
			S003 A 2;
			S004 A 2;
			S005 A 2;
			S006 A 2;
			S007 A 2;
			S008 A 2;
			S009 A 2;
			S010 A 2;
			S011 A 2;
			S012 A 2;
			S013 A 2;
			S014 A 2;
			S015 A 2;
			S016 A 2;
			S017 A 2;
			S018 A 2;
			S019 A 2;
			S020 A 2;
			S021 A 2;
			S022 A 2;
			S023 A 2;
			S024 A 2;
			S025 A 2;
			S026 A 2;
			S027 A 2;
			S028 A 2;
			S029 A 2;
			S030 A 2;
			S031 A 2;
			S032 A 2;
			S033 A 2;
			S034 A 2;
			S035 A 2;
			S036 A 2;
			S037 A 2;
			S038 A 2;
			S039 A 2;
			S040 A 2;
			S100 A 2;
			S101 A 2;
			S102 A 2;
			S103 A 2;
			S104 A 2;
			S105 A 2;
			S106 A 2;
			S107 A 2;
			S108 A 2;
			S109 A 2;
			S110 A 2;
			S111 A 2;
			S112 A 2;
			S113 A 2;
			S114 A 2;
			S115 A 2;
			S116 A 2;
			S117 A 2;
			S118 A 2;
			S119 A 2;
			S120 A 2;
			S121 A 2;
			S122 A 2;
			S123 A 2;
			S124 A 2;
			S125 A 2;
			S126 A 2;
			S127 A 2;
			S128 A 2;
			S129 A 2;
			S130 A 2;
			S131 A 2;
			S132 A 2;
			S133 A 2;
			S134 A 2;
			S135 A 2;
			S136 A 2;
			S137 A 2;
			S138 A 2;
			S139 A 2;
			S140 A 2;
			S200 A 2;
			S201 A 2;
			S202 A 2;
			S203 A 2;
			S204 A 2;
			S205 A 2;
			S206 A 2;
			S207 A 2;
			S208 A 2;
			S209 A 2;
			S210 A 2;
			S211 A 2;
			S212 A 2;
			S213 A 2;
			S214 A 2;
			S215 A 2;
			S216 A 2;
			S217 A 2;
			S218 A 2;
			S219 A 2;
			S220 A 2;
			S221 A 2;
			S222 A 2;
			S223 A 2;
			S224 A 2;
			S225 A 2;
			S226 A 2;
			S227 A 2;
			S228 A 2;
			S229 A 2;
			S230 A 2;
			S231 A 2;
			S232 A 2;
			S233 A 2;
			S234 A 2;
			S235 A 2;
			S236 A 2;
			S237 A 2;
			S238 A 2;
			S239 A 2;
			S240 A 2;
			S300 A 2;
			S301 A 2;
			S302 A 2;
			S303 A 2;
			S304 A 2;
			S305 A 2;
			S306 A 2;
			S307 A 2;
			S308 A 2;
			S309 A 2;
			S310 A 2;
			S311 A 2;
			S312 A 2;
			S313 A 2;
			S314 A 2;
			S315 A 2;
			S316 A 2;
			S317 A 2;
			S318 A 2;
			S319 A 2;
			S320 A 2;
			S321 A 2;
			S322 A 2;
			S323 A 2;
			S324 A 2;
			S325 A 2;
			S326 A 2;
			S327 A 2;
			S328 A 2;
			S329 A 2;
			S330 A 2;
			S331 A 2;
			S332 A 2;
			S333 A 2;
			S334 A 2;
			S335 A 2;
			S336 A 2;
			S337 A 2;
			S338 A 2;
			S339 A 2;
			S340 A 2;
			S400 A 2;
			S401 A 2;
			S402 A 2;
			S403 A 2;
			S404 A 2;
			S405 A 2;
			S406 A 2;
			S407 A 2;
			S408 A 2;
			S409 A 2;
			S410 A 2;
			S411 A 2;
			S412 A 2;
			S413 A 2;
			S414 A 2;
			S415 A 2;
			S416 A 2;
			S417 A 2;
			S418 A 2;
			S419 A 2;
			S420 A 2;
			S421 A 2;
			S422 A 2;
			S423 A 2;
			S424 A 2;
			S425 A 2;
			S426 A 2;
			S427 A 2;
			S428 A 2;
			S429 A 2;
			S430 A 2;
			S431 A 2;
			S432 A 2;
			S433 A 2;
			S434 A 2;
			S435 A 2;
			S436 A 2;
			S437 A 2;
			S438 A 2;
			S439 A 2;
			S440 A 2;
			S500 A 2;
			S501 A 2;
			S502 A 2;
			S503 A 2;
			S504 A 2;
			S505 A 2;
			S506 A 2;
			S507 A 2;
			S508 A 2;
			S509 A 2;
			S510 A 2;
			S511 A 2;
			S512 A 2;
			S513 A 2;
			S514 A 2;
			S515 A 2;
			S516 A 2;
			S517 A 2;
			S518 A 2;
			S519 A 2;
			S520 A 2;
			S521 A 2;
			S522 A 2;
			S523 A 2;
			S524 A 2;
			S525 A 2;
			S526 A 2;
			S527 A 2;
			S528 A 2;
			S529 A 2;
			S530 A 2;
			S531 A 2;
			S532 A 2;
			S533 A 2;
			S534 A 2;
			S535 A 2;
			S536 A 2;
			S537 A 2;
			S538 A 2;
			S539 A 2;
			S540 A 2;
			Loop;
	}

	double old_angle;
	double old_pitch;

	void A_ChaseGoal(void)
	{
		
	}

	void A_TurnFace(int max_turn = 0, int max_turnamt = 0, int pitch_range = 270)
	{
		if (target)
		{
			old_angle = angle;
			old_pitch = pitch;

			A_Face(target, max_turnamt, pitch_range, 0, 0, FAF_TOP);

			if ((angle > master.angle + max_turn) || (angle < master.angle - max_turn))
			{
				angle = old_angle;
			}

			if ((pitch > master.pitch + pitch_range) || (pitch < master.pitch - pitch_range))
			{
				pitch = old_pitch;
			}
		}
	}
}

class TOSCrewman : TOSNPC
{
	default
	{
		DeathSound "player/death";
		Species "Starfleet";
		Tag "Human Male";
		Obituary "%o was killed by a crewman.";
		DropItem "PhaserType2";
		YScale 1.5;
	}
}

class Facer : Decoration
{
	double old_angle;
	double old_pitch;

	default
	{
		+SOLID
		Height 8;
		Radius 4;
	}

	void A_TurnFace(int max_turn = 360, int max_turnamt = 1, int pitch_range = 0)
	{
		if (master)
		{
			if (master.target == null && target)
			{
				master.target = target;
			}
			else if (master.target)
			{
				target = master.target;
			}

			if (target)
			{
				old_angle = angle;
				old_pitch = pitch;

				A_Face(target, max_turnamt, pitch_range, 0, 0, FAF_TOP);

				if ((angle > master.angle + max_turn) || (angle < master.angle - max_turn))
				{
					angle = old_angle;
				}

				if ((pitch > master.pitch + pitch_range) || (pitch < master.pitch - pitch_range))
				{
					pitch = old_pitch;
				}
			}
		}
	}

	States
	{
		Spawn:
			TOS1 A 1;
			Loop;
	}
}

class Arrow_Head : Facer
{
	States
	{
		Spawn:
			TOS1 A 1 A_TurnFace(43, 15, 30);
			Loop;
	}
}

class Arrow_Torso : Facer
{
	States
	{
		Spawn:
			TOS1 A 1 A_TurnFace(15, 1, 5);
			Loop;
	}
}

class Arrow_Legs : Facer {}

class T : Actor
{
	States
	{
		Spawn:
			TNT1 A 5 NoDelay {
				Actor legs = Spawn("Arrow_Legs", pos);
				Actor torso = Spawn("Arrow_Torso", (pos.xy, pos.z + 32.0));
				Actor head = Spawn("Arrow_Head", (pos.xy, pos.z + 64.0));

				head.master = torso;
				torso.master = legs;
			}
		Stop;
	}	
}

/*
ACTOR TOSCrewman : TrekEnemy
{
	var int user_FireCount;
	var int user_angle;
	var int user_static;
	var int user_wasstatic;
	var int user_x;
	var int user_y;

	Health 100
	PainChance 256
	Speed 4
	Radius 12
	Height 64
	MeleeThreshold 128
	MaxStepHeight 8
	+TELESTOMP
	+FRIENDLY
	+PICKUP
	+JUMPDOWN
	+NOBLOCKMONST
	+MISSILEMORE
	+MISSILEEVENMORE
	-COUNTKILL
	+ACTIVATEIMPACT
	DeathSound "player/death"
	Species "Starfleet"
	Tag "Human Male"
	Obituary "%o was killed by a crewman."

	DropItem "PhaserType2"

	States
	{
		Spawn:
			TNT1 A 0 
			TNT1 A 0 ACS_NamedExecuteAlways("SetRadarTID",0)
			TNT1 A 0 ACS_NamedExecuteAlways("A_SetupThing",0)
			TNT1 A 0 {
				user_angle = angle;
				user_x = x;
				user_y = y;

				if (args[1] == 1) { return State("Crew"); }
				else if (args[1] == 2) { return State("LTJG"); }
				else if (args[1] == 3) { return State("LT"); }
				else { return State(""); }
			}
			TNT1 A 0 A_SetScale(FRandom(1.2, 1.4), FRandom(1.2, 1.4))
			TNT1 A 0 A_Jump(256, "Crew", "Officer")
		Crew:
			TNT1 A 0 {
				if (args[0] == 1) { return State("Crew.Gold"); }
				else if (args[0] == 2) { return State("Crew.Blue"); }
				else if (args[0] == 3) { return State("Crew.Red"); }
				else { return State(""); }
			}
			TNT1 A 0 A_Jump(256, "Crew.Red", "Crew.Gold", "Crew.Blue")
			Crew.Red:
				TOS1 A 0
				"####" A 0 A_Jump(256, "Wander")
			Crew.Gold:
				TOS2 A 0
				"####" A 0 A_Jump(256, "Wander")
			Crew.Blue:
				TOS3 A 0
				"####" A 0 A_Jump(256, "Wander")
		Officer:
			TNT1 A 0 A_Jump(128, "LTJG", "LT")
			LTJG:
				TNT1 A 0 {
					if (args[0] == 1) { return State("LTJG.Gold"); }
					else if (args[0] == 2) { return State("LTJG.Blue"); }
					else if (args[0] == 3) { return State("LTJG.Red"); }
					else { return State(""); }
				}
				TNT1 A 0 A_Jump(256, "LTJG.Red", "LTJG.Gold", "LTJG.Blue")
				LTJG.Red:
					TOS4 A 0
					"####" A 0 A_Jump(256, "Wander")
				LTJG.Gold:
					TOS5 A 0
					"####" A 0 A_Jump(256, "Wander")
				LTJG.Blue:
					TOS6 A 0
					"####" A 0 A_Jump(256, "Wander")
			LT:
				TNT1 A 0 {
					if (args[0] == 1) { return State("LT.Gold"); }
					else if (args[0] == 2) { return State("LT.Blue"); }
					else if (args[0] == 3) { return State("LT.Red"); }
					else { return State(""); }
				}
				TNT1 A 0 A_Jump(256, "LT.Red", "LT.Gold", "LT.Blue")
				LT.Red:
					TOS7 A 0
					"####" A 0 A_Jump(256, "Wander")
				LT.Gold:
					TOS8 A 0
					"####" A 0 A_Jump(256, "Wander")
				LT.Blue:
					TOS9 A 0
					"####" A 0 A_Jump(256, "Wander")
		Wander:
			"####" # 0 {
				if (args[2] == 1) {
					user_static = 1;
					return State("Static");
				} else if (args[2] == 2) {
					return State("Stand");
				} else {
					return State("");
				}
			}
		Wander.Loop:
			"####" AAAAAA 1 A_Wander(CHF_NORANDOMTURN)
			"####" A 0 A_Look
			"####" BBBBBB 1 A_Wander(CHF_NORANDOMTURN)
			"####" B 0 A_Look
			"####" CCCCCC 1 A_Wander(CHF_NORANDOMTURN)
			"####" C 0 A_Look
			"####" DDDDDD 1 A_Wander(CHF_NORANDOMTURN)
			"####" D 0 A_Look
			"####" D 0 A_SetAngle(angle + Random(-1, 1))
			Loop
		Pain:
			"####" A 0 A_ChangeFlag("FRIGHTENED", 1)
		See:
			"####" # 0 {
				if (user_static > 0) {
					user_static = 0;
					user_wasstatic = 1;
					A_UnSetSolid();
					return State("");
				} else {
					A_SetSolid();
					if (x == user_x && y == user_y) {
						user_static = 1;
						angle = user_angle;
						return State("Static");
					} else {
						return State("");
					}
				}
			}
			"####" AAAAAA Random(1, 2) A_Chase ("Phaser", "Phaser")
			"####" BBBBBB Random(1, 2) A_Chase ("Phaser", "Phaser")
			"####" CCCCCC Random(1, 2) A_Chase ("Phaser", "Phaser")
			"####" DDDDDD Random(1, 2) A_Chase ("Phaser", "Phaser")
			"####" A 0 A_ChangeFlag("FRIGHTENED", 1)
			"####" A 0 A_JumpIfCloser(256.0, "See")
			"####" A 0 A_JumpIf(health < 35, "See")
			"####" A 0 A_JumpIfInventory("Charge", 16, 1)
			Goto See
		Phaser:
			"####" A 0 A_Jump(128, "Phaser.Stun", "Phaser.Disintegrate")
		Phaser.Normal:
			"####" A 0 A_ChangeFlag("FRIGHTENED", 0)
			"####" A 0 A_JumpIf(user_FireCount > 10, "Return")
			"####" E 1 { //A_CustomRailgun(0, 9, "None", "AA DD DD", RGF_CENTERZ | RGF_NOPIERCING | RGF_FULLBRIGHT, 1, 0, "None", 0, 0, 2048, 1, 0.2, 0, "None", 22)
				A_SpawnItemEx("LaserBeam_B", 14, 9, 50, 0, 0, 0, 0, SXF_NOCHECKPOSITION | SXF_ISTRACER | SXF_SETMASTER | SXF_TRANSFERPITCH);
				A_SetScale(FRandom(0.7, 0.9), GetDistance(1, AAPTR_TARGET) - 14, AAPTR_TRACER);
				A_CustomRailgun(3, 9, "None", "None", RGF_CENTERZ | RGF_NOPIERCING | RGF_FULLBRIGHT, 1, 0, "PhaserHit", 0, 0, 2048, 4, FRandom(6.0, 8.0), 0, "SmallBlueLight", 22);
			}
			"####" A 0 A_SetUserVar ("user_FireCount", user_FireCount + 1)
			"####" A 0 A_FaceTarget(0.1)
			"####" A 0 A_CheckLOF("Phaser.Normal")
		Phaser.Stun:
			"####" A 0 A_ChangeFlag("FRIGHTENED", 0)
			"####" A 0 A_JumpIf(user_FireCount > 10, "Return")
			"####" E 1 { //A_CustomRailgun(0, 9, "None", "FF AA AA", RGF_CENTERZ | RGF_NOPIERCING | RGF_FULLBRIGHT, 1, 0, "None", 0, 0, 2048, 1, 0.2, 0, "None", 22)
				A_SpawnItemEx("LaserBeam_O", 14, 9, 50, 0, 0, 0, 0, SXF_NOCHECKPOSITION | SXF_ISTRACER | SXF_SETMASTER | SXF_TRANSFERPITCH);
				A_SetScale(FRandom(0.7, 0.9), GetDistance(1, AAPTR_TARGET) - 14, AAPTR_TRACER);
				A_CustomRailgun(1, 9, "None", "None", RGF_CENTERZ | RGF_NOPIERCING | RGF_FULLBRIGHT, 1, 0, "PhaserStunHit", 0, 0, 2048, 4, FRandom(6.0, 8.0), 0, "SmallOrangeLight", 22);
			}
			"####" A 0 A_SetUserVar ("user_FireCount", user_FireCount + 1)
			"####" A 0 A_FaceTarget(0.1)
			"####" A 0 A_CheckLOF("Phaser.Stun")
		Phaser.Disintegrate:
			"####" A 0 A_ChangeFlag("FRIGHTENED", 0)
			"####" A 0 A_JumpIf(user_FireCount > 10, "Return")
			"####" E 1 { //A_CustomRailgun(0, 9, "None", "FF AA AA", RGF_CENTERZ | RGF_NOPIERCING | RGF_FULLBRIGHT, 1, 0, "None", 0, 0, 2048, 1, 0.2, 0, "None", 22)
				A_SpawnItemEx("LaserBeam_R", 14, 9, 50, 0, 0, 0, 0, SXF_NOCHECKPOSITION | SXF_ISTRACER | SXF_SETMASTER | SXF_TRANSFERPITCH);
				A_SetScale(FRandom(0.7, 0.9), GetDistance(1, AAPTR_TARGET) - 14, AAPTR_TRACER);
				A_CustomRailgun(10, 9, "None", "None", RGF_CENTERZ | RGF_NOPIERCING | RGF_FULLBRIGHT, 1, 0, "PhaserDisintegrateHit", 0, 0, 2048, 4, FRandom(6.0, 8.0), 0, "SmallRedLight", 22);
			}
			"####" A 0 A_SetUserVar ("user_FireCount", user_FireCount + 1)
			"####" A 0 A_FaceTarget(0.1)
			"####" A 0 A_CheckLOF("Phaser.Disintegrate")
		Return:
			"####" A 0 A_SetUserVar ("user_FireCount", 0)
			Goto See
		Disintegrate:
			"####" A 0 A_GiveInventory("Disintegration", 1, AAPTR_TARGET)
			"####" # 0 A_ClearTarget
			Goto Wander
		XDeath:
		Death:
		Death.Respawn:
			"####" F 6 A_Scream
			"####" GH 6
			"####" I Random(105, 210) A_Respawn(True)
			Stop
		Relocate:
			"####" A 1 A_Warp(AAPTR_PLAYER1, -64, 0, 0, 0, WARPF_INTERPOLATE)
			"####" A 0 A_ClearTarget
			"####" A 0 A_ChangeFlag("FRIGHTENED", 0)
			Goto See
		Static:
			"####" A 0 A_Look
			"####" WWWWWWWWW 5 A_Jump(8, "Idle")
			Goto Static
		Idle:
			"####" WWXXYYWW 5
			Goto Static
		Stand:
			"####" A 5 A_Look
			Loop
	}
}
*/
/*
ACTOR TOSCrewmanOld : TrekEnemy
{
//	var int user_FireCount;
//	var int user_angle;

	Health 100
	PainChance 256
	Speed 4
	Radius 12
	Height 64
	MeleeThreshold 128
	MaxStepHeight 8
	+TELESTOMP
	+FRIENDLY
	+PICKUP
	+JUMPDOWN
	+NOBLOCKMONST
	+MISSILEMORE
	+MISSILEEVENMORE
	-COUNTKILL
	+ACTIVATEIMPACT
	DeathSound "player/death"
	Species "Starfleet"
	Tag "Human Male"
	Obituary "%o was killed by a crewman."

	DropItem "PhaserType2"

	States
	{
		Spawn:
			TNT1 A 0 
			TNT1 A 0 ACS_NamedExecuteAlways("SetRadarTID",0)
			"####" A 0 ACS_NamedExecuteAlways("A_SetupThing",0)
//			"####" A 0 A_SetUserVar ("user_angle", Random(0, 15))
			TNT1 A 0 A_SetScale(FRandom(1.2, 1.4), FRandom(1.2, 1.4))
//			"####" A 0 ACS_NamedExecuteAlways("A_CheckNavDir")
			TNT1 A 0 A_Jump(256, "Crew", "Officer")
		Crew:
			TNT1 A 0 A_Jump(256, "Crew.Red", "Crew.Gold", "Crew.Blue")
			Crew.Red:
				TOS1 A 1
				"####" A 0 A_Jump(256, "Wander")
			Crew.Gold:
				TOS2 A 1
				"####" A 0 A_Jump(256, "Wander")
			Crew.Blue:
				TOS3 A 1
				"####" A 0 A_Jump(256, "Wander")
		Officer:
			TNT1 A 0 A_Jump(128, "LTJG", "LT")
			LTJG:
				TNT1 A 0 A_Jump(256, "LTJG.Red", "LTJG.Gold", "LTJG.Blue")
				LTJG.Red:
					TOS4 A 1
					"####" A 0 A_Jump(256, "Wander")
				LTJG.Gold:
					TOS5 A 1
					"####" A 0 A_Jump(256, "Wander")
				LTJG.Blue:
					TOS6 A 1
					"####" A 0 A_Jump(256, "Wander")
			LT:
				TNT1 A 0 A_Jump(256, "LT.Red", "LT.Gold", "LT.Blue")
				LT.Red:
					TOS7 A 1
					"####" A 0 A_Jump(256, "Wander")
				LT.Gold:
					TOS8 A 1
					"####" A 0 A_Jump(256, "Wander")
				LT.Blue:
					TOS9 A 1
					"####" A 0 A_Jump(256, "Wander")
//		Spawn.PatrolNoClip:
//			"####" A 0 A_JumpIf(angle % 45 == 0, "TurnAround")
//			"####" A 0 A_SetAngle(angle - 90)
//			"####" A 35
//			"####" CC 1 ThrustThing (angle * 256 / 360, 1, 0, 0)
//			"####" A 0 A_JumpIf((velx != 0) || (vely != 0), "Spawn.Patrol")
//			"####" A 0 A_SetAngle(CallACS("A_CheckNavDir"))
//			"####" A 0 A_SetUserVar ("user_angle", CallACS("A_CheckNavDir"))
//			Goto Spawn.Patrol
//			"####" AAAAAA 1 A_Wander
//			"####" A 0 A_Look
//			"####" A 0 A_SetAngle(user_angle)
//			"####" BBBBBB 1 A_Wander
//			"####" B 0 A_Look
//			"####" A 0 A_SetAngle(user_angle)
//			"####" CCCCCC 1 A_Wander
//			"####" C 0 A_Look
//			"####" A 0 A_SetAngle(user_angle)
//			"####" DDDDDD 1 A_Wander
//			"####" D 0 A_Look
//			"####" A 0 A_SetAngle(user_angle)
//			"####" AAAAA 1 A_Wander
//			"####" AA 1 A_LookEx (0, 0, 0, 2048, 0, "See")
//			"####" BBBBB 1 A_Wander
//			"####" BB 1 A_LookEx (0, 0, 0, 2048, 0, "See")
//			"####" CCCCC 1 A_Wander
//			"####" CC 1 A_LookEx (0, 0, 0, 2048, 0, "See")
//			"####" DDDDD 1 A_Wander
//			"####" DD 1 A_LookEx (0, 0, 0, 2048, 0, "See")
//			"####" A 0 A_SetAngle(user_angle)
//			Goto Spawn.Patrol
//			"####" A 6 A_Warp(AAPTR_DEFAULT, 45, 0, 0, 0, WARPF_STOP | WARPF_INTERPOLATE, "Spawn.Patrol")
//			"####" A 6 A_Warp(AAPTR_DEFAULT, 90, 0, 0, 0, WARPF_STOP | WARPF_INTERPOLATE, "Spawn.Patrol")
//		TurnAround:
//			"####" A 1 ThrustThing (angle * 256 / 360, 1, 0, 0)
//			"####" A 0 A_JumpIf((velx != 0) || (vely != 0), "Spawn.Patrol")
//			"####" A 0 A_SetUserVar ("user_angle", user_angle + 1)
//			"####" A 0 A_JumpIf(user_angle > 8, "Left")
//			Right:
//				"####" A 0 A_SetAngle(angle + 45)
//				Goto Spawn.Patrol
//			Left:
//				"####" A 0 A_SetAngle(angle - 45)
//				"####" A 0 A_JumpIf(user_angle < 16, "Spawn.Patrol")
//				"####" A 0 A_SetUserVar ("user_angle", 0)
//				Goto Spawn.Patrol
//		Wander:
		Spawn.Patrol:

//			"####" A 0 A_SetUserVar ("user_angle", CallACS("A_CheckNavDir"))
//			"####" A 0 A_SetAngle(user_angle)
//			"####" AA 1 ThrustThing (angle * 256 / 360, 1, 0, 0)
//			"####" AA 1 A_LookEx (0, 0, 0, 2048, 0, "See")
//			"####" BBBB 1 A_LookEx (0, 0, 0, 2048, 0, "See")
//			"####" A 0 A_JumpIf((velx == 0) && (vely == 0), "Spawn.PatrolNoClip")
//			"####" A 0 A_CheckBlock("Spawn.PatrolNoClip")
//			"####" CC 1 ThrustThing (angle * 256 / 360 + random(-8, 8), 1, 0, 0)
//			"####" CC 1 A_LookEx (0, 0, 0, 2048, 0, "See")
//			"####" DDDD 1 A_LookEx (0, 0, 0, 2048, 0, "See")
//			"####" A 0 A_JumpIf((velx == 0) && (vely == 0), "Spawn.PatrolNoClip")
//			"####" A 0 A_CheckBlock("Spawn.PatrolNoClip")
//			"####" A 0 A_Jump(250, "Spawn.Patrol")
//			Loop

		Wander:
//			"####" A 0 A_SetUserVar ("user_angle", angle)
			"####" AAAAAA 1 A_Wander(CHF_NORANDOMTURN)
			"####" A 0 A_Look
//			"####" A 0 A_SetAngle(user_angle)
			"####" BBBBBB 1 A_Wander(CHF_NORANDOMTURN)
			"####" B 0 A_Look
//			"####" A 0 A_SetAngle(user_angle)
			"####" CCCCCC 1 A_Wander(CHF_NORANDOMTURN)
			"####" C 0 A_Look
//			"####" A 0 A_SetAngle(user_angle)
			"####" DDDDDD 1 A_Wander(CHF_NORANDOMTURN)
			"####" D 0 A_Look
//			"####" A 0 A_SetAngle(user_angle)
			Loop
		Pain:
			"####" A 0 A_ChangeFlag("FRIGHTENED", 1)
		See:
			"####" AAAAAA Random(1, 2) A_Chase ("", "Phaser")
			"####" BBBBBB Random(1, 2) A_Chase ("", "Phaser")
			"####" CCCCCC Random(1, 2) A_Chase ("", "Phaser")
			"####" DDDDDD Random(1, 2) A_Chase ("", "Phaser")
//			"####" A 0 A_CheckSightOrRange(1024.0, "Relocate")
			"####" A 0 A_ChangeFlag("FRIGHTENED", 1)
			"####" A 0 A_JumpIfCloser(256.0, "See")
			"####" A 0 A_JumpIf(health < 35, "See")
			"####" A 0 A_JumpIfInventory("Charge", 16, 1)
			Goto See
//			"####" A 0 A_Jump(128, "See")
//			"####" A 0 A_ChangeFlag("FRIGHTENED", 0)
//			Loop
		Phaser:
			"####" A 0 A_Jump(128, "Phaser.Stun", "Phaser.Disintegrate")
		Phaser.Normal:
			"####" A 0 A_ChangeFlag("FRIGHTENED", 0)
			"####" A 0 A_JumpIf(user_FireCount > 10, "Return")
			"####" A 0 A_CustomRailgun(0, 9, "None", "AA DD DD", RGF_CENTERZ | RGF_NOPIERCING | RGF_FULLBRIGHT, 1, 0, "None", 0, 0, 2048, 1, 0.2, 0, "None", 22)
			"####" E 1 A_CustomRailgun(3, 9, "None", "None", RGF_CENTERZ | RGF_NOPIERCING | RGF_FULLBRIGHT, 1, 0, "PhaserHit", 0, 0, 0, 2048, 1.0, 0, "BluePhaserParticle", 22)
			"####" A 0 A_SetUserVar ("user_FireCount", user_FireCount + 1)
			"####" A 0 A_FaceTarget(0.1)
			"####" A 0 A_CheckLOF("Phaser.Normal", CLOFF_JUMP_ON_MISS)
		Phaser.Stun:
			"####" A 0 A_ChangeFlag("FRIGHTENED", 0)
			"####" A 0 A_JumpIf(user_FireCount > 10, "Return")
			"####" A 0 A_CustomRailgun(0, 9, "None", "FF AA AA", RGF_CENTERZ | RGF_NOPIERCING | RGF_FULLBRIGHT, 1, 0, "None", 0, 0, 2048, 1, 0.2, 0, "None", 22)
			"####" E 1 A_CustomRailgun(1, 9, "None", "None", RGF_CENTERZ | RGF_NOPIERCING | RGF_FULLBRIGHT, 1, 0, "PhaserStunHit", 0, 0, 0, 2048, 1.0, 0, "OrangePhaserParticle", 22)
			"####" A 0 A_SetUserVar ("user_FireCount", user_FireCount + 1)
			"####" A 0 A_FaceTarget(0.1)
			"####" A 0 A_CheckLOF("Phaser.Stun", CLOFF_JUMP_ON_MISS)
		Phaser.Disintegrate:
			"####" A 0 A_ChangeFlag("FRIGHTENED", 0)
			"####" A 0 A_JumpIf(user_FireCount > 10, "Return")
			"####" A 0 A_CustomRailgun(0, 9, "None", "FF AA AA", RGF_CENTERZ | RGF_NOPIERCING | RGF_FULLBRIGHT, 1, 0, "None", 0, 0, 2048, 1, 0.2, 0, "None", 22)
			"####" E 1 A_CustomRailgun(10, 9, "None", "None", RGF_CENTERZ | RGF_NOPIERCING | RGF_FULLBRIGHT, 1, 0, "PhaserDisintegrateHit", 0, 0, 0, 2048, 1.0, 0, "RedPhaserParticle", 22)
			"####" A 0 A_SetUserVar ("user_FireCount", user_FireCount + 1)
			"####" A 0 A_FaceTarget(0.1)
//			"####" # 0 A_JumpIfHealthLower(3, "Disintegrate",  AAPTR_TARGET)
			"####" A 0 A_CheckLOF("Phaser.Disintegrate", CLOFF_JUMP_ON_MISS)
		Return:
			"####" A 0 A_SetUserVar ("user_FireCount", 0)
			Goto See
		Disintegrate:
			"####" A 0 A_GiveInventory("Disintegration", 1, AAPTR_TARGET)
			"####" # 0 A_ClearTarget
			Goto Wander
		XDeath:
		Death:
		Death.Respawn:
			"####" F 6 A_Scream
			"####" GH 6
			"####" I Random(105, 210) A_Respawn(True)
			Stop
		Relocate:
			"####" A 1 A_Warp(AAPTR_PLAYER1, -64, 0, 0, 0, WARPF_INTERPOLATE)
			"####" A 0 A_ClearTarget
			"####" A 0 A_ChangeFlag("FRIGHTENED", 0)
			Goto See
	}
}
*/

/*
ACTOR TOSArmedRedShirt : TOSCrewman
{
	var int user_mapmarker;
	Speed 8
	States
	{
		Spawn:
			TOS1 A 0 NoDelay ACS_NamedExecuteAlways("SetRadarTID",0)
			"####" A 0 ACS_NamedExecuteAlways("A_SetupThing",0)
			"####" A 1 A_GiveInventory("Charge", 50)
			Goto Wander
		Relocate:
			"####" A 0 A_ClearTarget
			"####" A 0 A_ChangeFlag("FRIGHTENED", 0)
			Goto See
	}
}

ACTOR TOSArmedRedShirtLoaded : TOSArmedRedShirt
{
	Speed 16
	States
	{
		Spawn:
			TNT1 A 0 NoDelay ACS_NamedExecuteAlways("SetRadarTID",0)
			"####" A 0 ACS_NamedExecuteAlways("A_SetupThing",0)
			"####" A 4 A_GiveInventory("Charge", 999)
			"####" A 4 A_GiveInventory("DisruptorCharge", 999)
			"####" A 4 A_GiveInventory("Disruptor", 1)
			"####" A 4 A_GiveInventory("PhaserRifle", 1)
			Goto Wander
		Death:
			Goto Death.Respawn
	}
}
*/